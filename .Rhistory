as.numeric(mats$pars.align.A[ids,1])
library(regsem)
cv.result
extractMatrices(result)["A"]
single.result <- regsem(model=result, lambda=0,pars_pen = c("a","b"))
print(single.result$coefficients)
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
cv.result
extractMatrices(result)["A"]
library(regsem)
library(regsem)
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
cv.result
library(regsem)
library(regsem)
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
cv.result
covarT.free$free
covarT.free
covarT$free
pars.align.S = matrix(NA,length(covarT$free),2)
covarT.free$free
length(covarT.free)
length(covarT.free$free)
covarT.free
S
covarT.free$label
S[S>0]
sort(S[S>0])
sort(unique((S[S>0]))
sort(unique(S[S>0]))
for(i in 1:length(covarT.free$free)){
pars.align.S[i,] = c(sort(unique(S[S>0]))[i],covarT.free$label[i])
}
pars.align.S
pars.align.A
library(regsem)
extractMatrices(result)
single.result <- regsem(model=result, lambda=0,pars_pen = c("a","b"))
print(single.result$coefficients)
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
plot(cv.result, legend.x="bottomright")
print(cv.result$parameters)
cv.result$pars_pen
sim.mod <- "
f1 =~ 1*y1 + 1*y2 + 1*y3+ 1*y4 + 1*y5
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0.2*x6 + 0.5*x7 + 0.8*x8
f1~~1*f1"
dat.sim = simulateData(sim.mod,sample.nobs=60,seed=12)
run.mod <- "
f1 =~ NA*y1 + y2 + y3+ y4 + y5
f1 ~ c1*x1 + c2*x2 + c3*x3 + c4*x4 + c5*x5 + c6*x6 + c7*x7 + c8*x8
f1~~1*f1
"
lav.out <- sem(run.mod,dat.sim,fixed.x=FALSE)
#summary(lav.out)
parameterestimates(lav.out)[6:13,] # just look at regressions
semPaths(lav.out)
# install.packages("regsem") # lavaan is a dependency
# install.packages("semPlot")
library(semPlot) # for plotting the model
semPaths(lav.out)
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
extractMatrices(lav.out)
model=lav.out
matrices <-  list()
#library(Matrix)
#library(lavaan)
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
#parT = parT[parT$exo != 1,]
#pars = pars[parT$exo != 1,]
nfac.hold1 <- pars[pars$op == "=~",]
nfac1 <- length(unique(nfac.hold1$lhs))
mean =FALSE
if(any(parT$op == "~1")){
parTT = parT[parT$op == "~1",]
if(any(parTT$free > 0)){
mean = TRUE
}
}
nfac2 = nfac1 + ifelse(mean==TRUE,1,0)
# check for groups
#model@pta$ngroups
nvar = model@pta$nvar[[1]][1]
A_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
#unique(nfac.hold1$lhs)
name <- unique(pars$lhs)
name.vars <- model@pta$vnames$ov[[1]]
name.factors <- model@pta$vnames$lv[[1]]
if(identical(name.factors, character(0))){
name.factors2=NA
}else{
name.factors2 = name.factors
}
if(length(name.factors)!=0){
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1",name.factors)
rownames(A_init) <- c(name.vars,"1",name.factors)
}else{
colnames(A_init) <- c(name.vars,name.factors)
rownames(A_init) <- c(name.vars,name.factors)
}
}else{
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1")
rownames(A_init) <- c(name.vars,"1")
}else{
colnames(A_init) <- c(name.vars)
rownames(A_init) <- c(name.vars)
}
}
A <- A_init
A.parT = parT[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.pars = pars[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.parFree <- A.parT[A.parT$free > 0,]
uniq <- unique(A.parFree[,"label"])
uniq2 <- uniq[table(A.parFree[,"label"]) == 1]
pars.align.A = matrix(NA,length(uniq),2)
if(length(uniq2)>0){
for(i in 1:length(uniq2)){
A.parFree[A.parFree[,"label"] == uniq2[i],"label"] <- ""
}
}
# any equality?
if(any(duplicated(A.parFree$label[A.parFree$label != ""]) == T)){
labels = unique(A.parFree$label[A.parFree$label != ""])
for(i in 1:length(labels)){
equals = A.parFree$free[A.parFree$label == labels[i]]
min.equal = min(equals)
max.equal = max(equals)
A.parFree$free[A.parFree$label == labels[i]] <- min.equal
#  dec = max.equal - min.equal
# A.parFree$free[A.parFree$label == labels[i]] <- A.parFree$free[A.parFree$label == labels[i]] - dec
}
#equals = A.parFree$free[A.parFree$label == labels]
}
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
loadings <- NULL
regressions <- NULL
if(nrow(A.parFree2) > 0){
for(i in 1:nrow(A.parFree2)){
if(A.parFree2$op[i] == "=~"){
colNum <- which(A.parFree2$lhs[i] == colnames(A))
rowNum <- which(A.parFree2$rhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
loadings = c(loadings,A.parFree2[i,"free"])
}else if(A.parFree2$op[i] == "~1"){
A[which(rownames(A)==A.parFree2$lhs[i]),which(colnames(A) == "1")] = A.parFree2[i,"free"]
}else if(A.parFree2$op[i] == "~"){
colNum <- which(A.parFree2$rhs[i] == colnames(A))
rowNum <- which(A.parFree2$lhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
regressions = c(regressions,A.parFree2[i,"free"])
}
pars.align.A[i,] = c(i,uniq[i])
}
}else{
A = A
}
pars.align.A
nrow(A.parFree2)
A.parFree2
uniq2
uniq
A.parT
A.parT$free
pars.align.A = matrix(NA,length(A.parT$free),2)
if(length(uniq2)>0){
for(i in 1:length(uniq2)){
A.parFree[A.parFree[,"label"] == uniq2[i],"label"] <- ""
}
}
# any equality?
if(any(duplicated(A.parFree$label[A.parFree$label != ""]) == T)){
labels = unique(A.parFree$label[A.parFree$label != ""])
for(i in 1:length(labels)){
equals = A.parFree$free[A.parFree$label == labels[i]]
min.equal = min(equals)
max.equal = max(equals)
A.parFree$free[A.parFree$label == labels[i]] <- min.equal
#  dec = max.equal - min.equal
# A.parFree$free[A.parFree$label == labels[i]] <- A.parFree$free[A.parFree$label == labels[i]] - dec
}
#equals = A.parFree$free[A.parFree$label == labels]
}
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
loadings <- NULL
regressions <- NULL
if(nrow(A.parFree2) > 0){
for(i in 1:nrow(A.parFree2)){
if(A.parFree2$op[i] == "=~"){
colNum <- which(A.parFree2$lhs[i] == colnames(A))
rowNum <- which(A.parFree2$rhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
loadings = c(loadings,A.parFree2[i,"free"])
}else if(A.parFree2$op[i] == "~1"){
A[which(rownames(A)==A.parFree2$lhs[i]),which(colnames(A) == "1")] = A.parFree2[i,"free"]
}else if(A.parFree2$op[i] == "~"){
colNum <- which(A.parFree2$rhs[i] == colnames(A))
rowNum <- which(A.parFree2$lhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
regressions = c(regressions,A.parFree2[i,"free"])
}
pars.align.A[i,] = c(i,uniq[i])
}
}else{
A = A
}
pars.align.A
library(regsem)
extractMatrices(lav.out)
A.parFree2
A.parT$free
A.parT
library(regsem)
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
extractMatrices(lav.out)
reg.out
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8")
mats=extractMatrices(lav.out)
#pars_pen2 <- parse_parameters(pars_pen,model)
ids = which(pars_pen %in% mats$pars.align[,2])
pars_pen2 = as.numeric(mats$pars.align[ids,1])
pars_pen2
mats$pars.align
which(pars_pen %in% mats$pars.align[,2])
pars_pen
mats$pars.align[,2]
?which
which(pars_pen %in% mats$pars.align[,2],arr.ind=T)
which(pars_pen %in% mats$pars.align[,2],useNames=F)
pars_pen %in% mats$pars.align[,2]
#pars_pen2 <- parse_parameters(pars_pen,model)
mats$pars.align[,2][mats$pars.align[,2] == ""] <- NA
ids = which(pars_pen %in% mats$pars.align[,2])
ids
mats$pars.align
mats=extractMatrices(lav.out)
#pars_pen2 <- parse_parameters(pars_pen,model)
mats$pars.align[,2][mats$pars.align[,2] == ""] <- "na"
mats=extractMatrices(lav.out)
#pars_pen2 <- parse_parameters(pars_pen,model)
mats$pars.align[,2][mats$pars.align[,2] == ""] <- "NaN"
ids = which(pars_pen %in% mats$pars.align[,2])
ids
mats$pars.align
pars_pen %in% mats$pars.align[,2]
which(pars_pen %in% mats$pars.align[,2])
which(pars_pen %in% mats$pars.align[,2],arr.ind=T)
which(mats$pars.align[,2] %in% pars_pen)
mats=extractMatrices(lav.out)
ids = which(mats$pars.align[,2] %in% pars_pen)
pars_pen2 = as.numeric(mats$pars.align[ids,1])
pars_pen2
library(regsem)
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
reg.out
single.result <- regsem(model=result, lambda=0,pars_pen = c("a","b"))
print(single.result$coefficients)
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
cv.result
extractMatrices(result)
result<-lavaan(model, data=modelData, fixed.x=FALSE, missing="FIML");
summary(result, fit.measures=TRUE);
extractMatrices(result)["A"]
set.seed(234)
N <- 100
x1 <- rnorm(N)
x2 <- rnorm(N)
y <- -3+0.03*x1+3*x2+rnorm(N,0,0.5)
modelData <- data.frame(x1,x2,y)
model<-"
! observed means
x1~0*1;
x2~0*1;
x1~~x2;           # <- un/comment to reproduce error  ##########
! regressions
y ~ a*x1
y ~ b*x2
! residuals, variances and covariances
x1 ~~ VAR_x1*x1
x2 ~~ VAR_x2*x2
y ~~ VAR_y*y
y~1;
";
result<-lavaan(model, data=modelData, fixed.x=FALSE, missing="FIML");
summary(result, fit.measures=TRUE);
extractMatrices(result)["A"]
single.result <- regsem(model=result, lambda=0,pars_pen = c("a","b"))
print(single.result$coefficients)
cv.result <- cv_regsem(model=result, n.lamb
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
cv.result
extractMatrices(result)["A"]
extractMatrices(result)
model=result
matrices <-  list()
#library(Matrix)
#library(lavaan)
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
#parT = parT[parT$exo != 1,]
#pars = pars[parT$exo != 1,]
nfac.hold1 <- pars[pars$op == "=~",]
nfac1 <- length(unique(nfac.hold1$lhs))
mean =FALSE
if(any(parT$op == "~1")){
parTT = parT[parT$op == "~1",]
if(any(parTT$free > 0)){
mean = TRUE
}
}
nfac2 = nfac1 + ifelse(mean==TRUE,1,0)
# check for groups
#model@pta$ngroups
nvar = model@pta$nvar[[1]][1]
A_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
#unique(nfac.hold1$lhs)
name <- unique(pars$lhs)
name.vars <- model@pta$vnames$ov[[1]]
name.factors <- model@pta$vnames$lv[[1]]
if(identical(name.factors, character(0))){
name.factors2=NA
}else{
name.factors2 = name.factors
}
if(length(name.factors)!=0){
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1",name.factors)
rownames(A_init) <- c(name.vars,"1",name.factors)
}else{
colnames(A_init) <- c(name.vars,name.factors)
rownames(A_init) <- c(name.vars,name.factors)
}
}else{
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1")
rownames(A_init) <- c(name.vars,"1")
}else{
colnames(A_init) <- c(name.vars)
rownames(A_init) <- c(name.vars)
}
}
A <- A_init
A.parT = parT[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.pars = pars[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.parFree <- A.parT[A.parT$free > 0,]
uniq <- unique(A.parFree[,"label"])
uniq2 <- uniq[table(A.parFree[,"label"]) == 1]
pars.align.A = matrix(NA,length(A.parT$free),2)
if(length(uniq2)>0){
for(i in 1:length(uniq2)){
A.parFree[A.parFree[,"label"] == uniq2[i],"label"] <- ""
}
}
# any equality?
if(any(duplicated(A.parFree$label[A.parFree$label != ""]) == T)){
labels = unique(A.parFree$label[A.parFree$label != ""])
for(i in 1:length(labels)){
equals = A.parFree$free[A.parFree$label == labels[i]]
min.equal = min(equals)
max.equal = max(equals)
A.parFree$free[A.parFree$label == labels[i]] <- min.equal
#  dec = max.equal - min.equal
# A.parFree$free[A.parFree$label == labels[i]] <- A.parFree$free[A.parFree$label == labels[i]] - dec
}
#equals = A.parFree$free[A.parFree$label == labels]
}
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
loadings <- NULL
regressions <- NULL
if(nrow(A.parFree2) > 0){
for(i in 1:nrow(A.parFree2)){
if(A.parFree2$op[i] == "=~"){
colNum <- which(A.parFree2$lhs[i] == colnames(A))
rowNum <- which(A.parFree2$rhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
loadings = c(loadings,A.parFree2[i,"free"])
}else if(A.parFree2$op[i] == "~1"){
A[which(rownames(A)==A.parFree2$lhs[i]),which(colnames(A) == "1")] = A.parFree2[i,"free"]
}else if(A.parFree2$op[i] == "~"){
colNum <- which(A.parFree2$rhs[i] == colnames(A))
rowNum <- which(A.parFree2$lhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
regressions = c(regressions,A.parFree2[i,"free"])
}
pars.align.A[i,] = c(i,A.parT[i,"label"])
}
}else{
A = A
}
pars.align.A
A.parT
A.parFree2
A.parFree
A.parFree
#library(Matrix)
#library(lavaan)
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
#parT = parT[parT$exo != 1,]
#pars = pars[parT$exo != 1,]
nfac.hold1 <- pars[pars$op == "=~",]
nfac1 <- length(unique(nfac.hold1$lhs))
mean =FALSE
if(any(parT$op == "~1")){
parTT = parT[parT$op == "~1",]
if(any(parTT$free > 0)){
mean = TRUE
}
}
nfac2 = nfac1 + ifelse(mean==TRUE,1,0)
# check for groups
#model@pta$ngroups
nvar = model@pta$nvar[[1]][1]
A_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
#unique(nfac.hold1$lhs)
name <- unique(pars$lhs)
name.vars <- model@pta$vnames$ov[[1]]
name.factors <- model@pta$vnames$lv[[1]]
if(identical(name.factors, character(0))){
name.factors2=NA
}else{
name.factors2 = name.factors
}
if(length(name.factors)!=0){
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1",name.factors)
rownames(A_init) <- c(name.vars,"1",name.factors)
}else{
colnames(A_init) <- c(name.vars,name.factors)
rownames(A_init) <- c(name.vars,name.factors)
}
}else{
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1")
rownames(A_init) <- c(name.vars,"1")
}else{
colnames(A_init) <- c(name.vars)
rownames(A_init) <- c(name.vars)
}
}
A <- A_init
A.parT = parT[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.pars = pars[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.parFree <- A.parT[A.parT$free > 0,]
uniq <- unique(A.parFree[,"label"])
uniq2 <- uniq[table(A.parFree[,"label"]) == 1]
pars.align.A = matrix(NA,length(A.parT$free),2)
A.parFree2 = A.parFree
if(length(uniq2)>0){
for(i in 1:length(uniq2)){
A.parFree[A.parFree[,"label"] == uniq2[i],"label"] <- ""
}
}
# any equality?
if(any(duplicated(A.parFree$label[A.parFree$label != ""]) == T)){
labels = unique(A.parFree$label[A.parFree$label != ""])
for(i in 1:length(labels)){
equals = A.parFree$free[A.parFree$label == labels[i]]
min.equal = min(equals)
max.equal = max(equals)
A.parFree$free[A.parFree$label == labels[i]] <- min.equal
#  dec = max.equal - min.equal
# A.parFree$free[A.parFree$label == labels[i]] <- A.parFree$free[A.parFree$label == labels[i]] - dec
}
#equals = A.parFree$free[A.parFree$label == labels]
}
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
loadings <- NULL
regressions <- NULL
if(nrow(A.parFree2) > 0){
for(i in 1:nrow(A.parFree2)){
if(A.parFree2$op[i] == "=~"){
colNum <- which(A.parFree2$lhs[i] == colnames(A))
rowNum <- which(A.parFree2$rhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
loadings = c(loadings,A.parFree2[i,"free"])
}else if(A.parFree2$op[i] == "~1"){
A[which(rownames(A)==A.parFree2$lhs[i]),which(colnames(A) == "1")] = A.parFree2[i,"free"]
}else if(A.parFree2$op[i] == "~"){
colNum <- which(A.parFree2$rhs[i] == colnames(A))
rowNum <- which(A.parFree2$lhs[i] == rownames(A))
A[rowNum,colNum] = A.parFree2[i,"free"]
regressions = c(regressions,A.parFree2[i,"free"])
}
pars.align.A[i,] = c(i,A.parFree2[i,"label"])
}
}else{
A = A
}
pars.align.A
A.parFree2
A.parT
A.parFree
library(regsem)
cv.result <- cv_regsem(model=result, n.lambda = 15,jump = .08,pars_pen = c("a","b"))
cv.result
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
reg.out
library(regsem)
