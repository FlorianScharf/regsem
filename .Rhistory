slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
summary(fit.lds)
extractMatrices(fit.lds)$A
lds_1 <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta1*lX1; dX2 ~ beta2*lX2; dX3 ~ beta3*lX3;dX4 ~ beta4*lX4;dX5 ~ beta5*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
summary(fit.lds)
extractMatrices(fit.lds)$A
out <- regsem::regsem(fit.lds,lambda=0.1,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iterations
out <- regsem::regsem(fit.lds,lambda=0.2,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iterations
out <- regsem::regsem(fit.lds,lambda=0.001,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iterations
str(out)
summary(fit.lds)
out <- regsem::regsem(fit.lds,lambda=0.001,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iterations
str(out)
out <- regsem::regsem(fit.lds,lambda=0.01,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iteration
out <- regsem::regsem(fit.lds,lambda=0.1,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iteration
out <- regsem::regsem(fit.lds,lambda=0.2,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iteration
out <- regsem::regsem(fit.lds,lambda=0.5,pars_pen=c(3:5),type="diff_lasso",step=.5,step.ratio=TRUE,diff_par=1.5,
optMethod="coord_desc",gradFun="ram",max.iter=2000,tol=1e-6)
summary(out);out$iteration
duplicated(out$coefficients)
library(lavaan)
library(semPlot)
mod <- "
i =~ 1*X1 + 1*X2 + 1*X3 + 1*X4 + 1*X5 + 1*X6
s =~ 1*X1 + 2*X2 + 4*X3 + 7*X4 + 11*X5 + 16*X6
i~100*1
s~-3*1
"
dat <- simulateData(mod,model.type="growth")
ntot <- nrow(dat)    # total number of observations
dat.sel <- dat[sample(ntot, 50), ]
dat.long.sel <- reshape(dat.sel, varying = c("X1", "X2", "X3", "X4", "X5", "X6"),
v.names = "Score", times = c(1, 2, 3,4,5,6), direction = "long")
library(ggplot2)
(p = qplot(time,Score,group=id,data=dat.long.sel,alpha=I(1/5),
geom = c("line","point"),xlab = "Time", ylab = "Score"))
lds_prop <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 0;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.prop <- lavaan(lds_prop, data=dat)
summary(fit.prop)
lds_1 <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
summary(fit.lds)
summary(fit.lds)
alpha=1
y1.1 = 97.8; slope <- -42; beta <- .391
y2.1 = y1.1 + alpha*slope + beta*y1.1
y3.1 = y2.1 + alpha*slope + beta*y1.1
y4.1 = y3.1 + alpha*slope + beta*y1.1
y5.1 = y4.1 + alpha*slope + beta*y1.1
y6.1 = y5.1 + alpha*slope + beta*y1.1
df1 <- data.frame(x=c(1,2,3,4,5,6), y = c(y1.1,y2.1,y3.1,y4.1,y5.1,y6.1),id=c(999,999,999,999,999,999))
(p2 = p + geom_line(data=df1,aes(x=x,y=y,id=id),colour="red",size=1))
extractMatrices(fit.lds)$A
out.cv <- cv_regsem(fit.lds,n.lambda=20,mult.start=FALSE,jump=1,#multi.iter=10,warm.start=TRUE,
type="lasso", gradFun = "ram",pars_pen=c(1,3),tol=1e-5,fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc",step=.5,step.ratio=TRUE,max.iter=10000)
out.cv
######### plot all results ##########
(p = qplot(time,Score,group=id,data=dat.long.sel,alpha=I(1/20),
geom = c("line","point"),xlab = "Time", ylab = "Score"))
#betas <- seq(.4,0,length.out=20)
pars <- out.cv[[1]]
for(i in 1:nrow(pars)){
alpha <- 1
y1.1 = pars[i,2]; slope <- pars[i,1]; beta <- pars[i,3]
y2.1 = y1.1 + alpha*slope + beta*y1.1
y3.1 = y2.1 + alpha*slope + beta*y1.1
y4.1 = y3.1 + alpha*slope + beta*y1.1
y5.1 = y4.1 + alpha*slope + beta*y1.1
y6.1 = y5.1 + alpha*slope + beta*y1.1
df1 <- data.frame(x=c(1,2,3,4,5,6), y = c(y1.1,y2.1,y3.1,y4.1,y5.1,y6.1),id=c(999,999,999,999,999,999))
p = p + geom_line(data=df1,aes(x=x,y=y,id=id),colour=i,size=1)
}
p
pars
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- "
f1 =~ 1*x1 + x2 + x3 + x7 + x8 + x9
f2 =~ NA*x1 + x2 + x3 + 1*x4 + x5 + x6
f3 =~ NA*x4 + x5 + x6 + 1*x7 + x8 + x9
"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
extractMatrices(lav.out)$A
cv.out <- cv_regsem(lav.out,n.lambda=10,type="lasso",lambda.start=0.05,multi.iter=10,step=1,step.ratio=FALSE,
jump=0.003,pars_pen=c(3:8,11:13))
cv.out
cv.out <- cv_regsem(lav.out,n.lambda=10,type="lasso",lambda.start=0.05,multi.iter=10,step=.1,step.ratio=FALSE,
jump=0.003,pars_pen=c(3:8,11:13))
cv.out
cv.out <- cv_regsem(lav.out,n.lambda=10,type="lasso",lambda.start=0.05,multi.iter=10,step=.5,step.ratio=FALSE,
jump=0.003,pars_pen=c(3:8,11:13))
cv.out
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- "
f1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
extractMatrices(lav.out)$A
summary(lav.out)
mod <- "
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f1~~1*f1
"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
summary(lav.out)
extractMatrices(lav.out)$A
cv.out <- cv_regsem(lav.out,n.lambda=10,type="lasso",,multi.iter=10,step=.5,step.ratio=FALSE,
jump=0.003,pars_pen=c(1:3,7:9))
cv.out
cv.out <- cv_regsem(lav.out,n.lambda=30,type="lasso",,multi.iter=10,step=.5,step.ratio=FALSE,
jump=0.003,pars_pen=c(1:3,7:9))
cv.out
cv.out <- cv_regsem(lav.out,n.lambda=30,type="lasso",,multi.iter=10,step=.5,step.ratio=FALSE,
jump=0.01,pars_pen=c(1:3,7:9))
cv.out <- cv_regsem(lav.out,n.lambda=30,type="lasso",multi.iter=10,step=.5,step.ratio=FALSE,
jump=0.01,pars_pen=c(1:3,7:9))
cv.out
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,step=.5,step.ratio=FALSE,
jump=0.01,pars_pen=c(1:3,7:9))
cv.out
library(semPlot)
semPaths(lav.out,what="est")
lav.out <- cfa(mod,HS,do.fit = T)
semPaths(lav.out,what="est")
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
coef.mat <- abs(cv.out[[1]][,c(1:3,7:9)])
shrink.vals <- cv.out[[2]][,"lambda"]
for(i in 1:6){
coef.mat[,i] <- coef.mat[,i]/coef.mat[1,i]
}
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=i,col=i)
#points(mat[,(nload)])
}
abline(a=0,b=0)
min(cv.out[[2]][,"BIC"])
cv.out
source('C:/Users/RJacobucci/Desktop/lslSEM.R')
library(regsem)
library(regsem)
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- "
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6
f1~~1*f1
"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
summary(lav.out)
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=.1,type="lasso")
out
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=.1,type="alasso")
library(regsem)
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso")
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso")
?cv_regsem
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso",mult.start=FALSE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso",mult.start=FALSE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso",mult.start=FALSE)
?regsem
library(regsem)
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso",mult.start=FALSE)
out
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="lasso",mult.start=FALSE)
out
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="lasso",mult.start=TRUE)
out
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso",mult.start=TRUE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=5,lambda.start=0,type="alasso",mult.start=TRUE)
out
?cv_regsem
out <- cv_regsem(lav.out,n.lambda=100,lambda.start=0,type="alasso",mult.start=TRUE)
out
out2 <- cv_regsem(lav.out,n.lambda=100,lambda.start=0,type="lasso",mult.start=TRUE)
out2
out2 <- cv_regsem(lav.out,n.lambda=100,lambda.start=0,type="lasso",mult.start=TRUE)
out2
out
out2
out <- cv_regsem(lav.out,n.lambda=100,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out <- cv_regsem(lav.out,n.lambda=40,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
out2 <- cv_regsem(lav.out,n.lambda=100,pars_pen=c(1:3),lambda.start=0,type="lasso",mult.start=TRUE)
out2 <- cv_regsem(lav.out,n.lambda=40,pars_pen=c(1:3),lambda.start=0,type="lasso",mult.start=TRUE)
out2
library(regsem)
library(regsem)
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- "
f1 =~ NA*x1 + x2 + x3 + 1*x4 + x5 + x6
f1~~f1
"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
summary(lav.out)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
out2 <- cv_regsem(lav.out,n.lambda=10,pars_pen=c(1:3),lambda.start=0,type="lasso",mult.start=TRUE)
out2
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
library(regsem)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
out
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
library(regsem)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
out
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
out
library(regsem)
out <- cv_regsem(lav.out,n.lambda=10,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
out
out <- cv_regsem(lav.out,n.lambda=30,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=FALSE)
out <- cv_regsem(lav.out,n.lambda=20,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
out2 <- cv_regsem(lav.out,n.lambda=20,pars_pen=c(1:3),lambda.start=0,type="lasso",mult.start=TRUE)
mod <- "
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6
f1~~1*f1
"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
summary(lav.out)
out <- cv_regsem(lav.out,n.lambda=20,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
mod <- "
f1 =~ NA*x1 + x2 + x3 + 1*x4 + x5 + x6
f1~~f1
"
out <- cv_regsem(lav.out,n.lambda=20,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
out2 <- cv_regsem(lav.out,n.lambda=20,pars_pen=c(1:3),lambda.start=0,type="lasso",mult.start=TRUE)
out2
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
out <- cv_regsem(lav.out,n.lambda=20,lambda.start=0,pars_pen=c(1:3),type="alasso",mult.start=TRUE)
out
out2 <- cv_regsem(lav.out,n.lambda=20,pars_pen=c(1:3),lambda.start=0,type="lasso",mult.start=TRUE)
out2
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(blavaan)
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- "
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f1~~1*f1"
lav.out <- cfa(mod,HS,meanstructure=T,do.fit = T)
extractMatrices(lav.out)$A
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,
jump=0.01,pars_pen=c(1:3,7:9))
cv.out
cv.out
extractMatrices(lav.out)$A
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,
jump=0.01,pars_pen=c(1:3,7:9))
traceback()
regsem(lav.out)
regsem(lav.out,type="lasso",lambda=0.1)
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,
jump=0.01,pars_pen=c(1:3,7:9))
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,optMethod="coord_desc",
jump=0.01,pars_pen=c(1:3,7:9))
regsem(lav.out,type="lasso",lambda=0.1)
multi_optim(lav.out,type="lasso",lambda=0.1)
cv_regsem(lav.out,type="lasso")
library(regsem)
cv_regsem(lav.out,type="lasso")
library(regsem)
cv_regsem(lav.out,type="lasso")
library(regsem)
cv_regsem(lav.out,type="lasso")
library(regsem)
cv_regsem(lav.out,type="lasso")
library(regsem)
cv_regsem(lav.out,type="lasso")
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,optMethod="coord_desc",
jump=0.01,pars_pen=c(1:3,7:9))
library(regsem)
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",multi.iter=10,optMethod="coord_desc",
jump=0.01,pars_pen=c(1:3,7:9))
install.packages("lavaan")
install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("mnormt")
library(regsem)
library(ISLR)
install.packages("ISLR")
library(regsem)
data(College)
library(ISLR)
library(regsem)
data(College)
College1 = College[which(College$Private=="Yes"),]
Data = data.frame(scale(College1[c(3,4,9:12,15,17)]))
model1 <-
' # direct effect (c)
Enroll ~ c*Accept
# mediators
Outstate ~ a1*Accept
Room.Board ~ a2*Accept
Books ~ a3*Accept
Personal ~ a4*Accept
S.F.Ratio ~ a5*Accept
Expend ~ a6*Accept
Enroll ~ b1*Outstate + b2*Room.Board + b3*Books + b4*Personal + b5*S.F.Ratio + b6*Expend
# indirect effects (a*b)
a1b1 := a1*b1
a2b2 := a2*b2
a3b3 := a3*b3
a4b4 := a4*b4
a5b5 := a5*b5
a6b6 := a6*b6
# total effect (c_prime)
total := c + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5) + (a6*b6)
'
fit.delta = sem(model1,data=Data,fixed.x=T)
summary(fit.delta)
extractMatrices(fit.delta)$A
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.002,multi.iter=200,mult.start=T,
n.lambda=15,tol=1e-4,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",
parallel=F,warm.start=T)
bics = fit.reg.tune[[2]][,"BIC"]
fit.reg.tune
install.packages("regsem")
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.002,multi.iter=200,mult.start=T,
n.lambda=85,tol=1e-4,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",
parallel=F,warm.start=T)
bics = fit.reg.tune[[2]][,"BIC"]
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.002,multi.iter=200,mult.start=T,
n.lambda=85,tol=1e-4,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",
parallel=F,warm.start=T)
library(regsem)
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.002,multi.iter=200,mult.start=T,
n.lambda=85,tol=1e-4,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",
parallel=F,warm.start=T)
fit.reg.tune
bics = fit.reg.tune[[2]][,"BIC"]
plot(1:85,bics)
min.bic = min(bics)
lambda=0
fit.reg1 = regsem(fit.delta,lambda=lambda,type="lasso",gradFun="ram",pars_pen=c(2:13),optMethod="coord_desc")
summary(fit.reg1)
fit.reg1 = multi_optim(fit.delta,lambda=lambda,type="lasso",gradFun="ram",pars_pen=c(2:13),optMethod="coord_desc")
summary(fit.reg1)
min.bic
lambda=0.02
fit.reg1 = multi_optim(fit.delta,lambda=lambda,type="lasso",gradFun="ram",pars_pen=c(2:13),optMethod="coord_desc")
summary(fit.reg1)
