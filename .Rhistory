model@SampleStats@cov[][[1]]
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="fiml")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="fiml")
outt@SampleStats
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="fiml")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="norm", missing="fiml")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="listwise")
model=outt
length(model@ParTable$op[model@ParTable$op == "~1"])
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="listwise")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="listwise")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="ram", missing="listwise")
fit1
outt = cfa(mod,HS)
summary(outt)
fitMeasures(outt)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", missing="listwise")
fit1
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
outt = cfa(mod,HS)
summary(outt)
fitMeasures(outt)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", missing="listwise")
fit1
outt@SampleStats@missing.flag
outt@SampleStats@missing
HS[1:50,1] <- NA
outt = cfa(mod,HS)
outt@SampleStats@missing.flag
summary(outt)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", missing="listwise")
fit1
fitMeasures(outt)
outt@SampleStats@missing
outt@SampleStats
str(outt)
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", missing="listwise")
outt@Data@nobs
outt@SampleStats@ngroups > 1
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", missing="listwise")
fit1 <- regsem(outt,type="none",optMethod="nlminb",hess="ram",
gradFun="ram", missing="listwise")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",hess="ram",
gradFun="ram", missing="listwise")
hess = fit1$hess
hess
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",hess="ram",
gradFun="ram", missing="listwise")
hess = fit1$hess
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
#HS[1:50,1] <- NA
mod <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
#x1~0*1
#x2~0*1
#x3~0*1
#x4~0*1
#x5~0*1
#x6~0*1
#x7~0*1
#x8~0*1
#x9~0*1
'
outt = cfa(mod,HS)
summary(outt)
fitMeasures(outt)
fit1 <- regsem(outt,type="none",optMethod="nlminb",hess="ram",
gradFun="ram", missing="listwise")
hess = fit1$hess
?nlminb
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="listwise")
library(regsem)
install.packages("numDeriv")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="listwise")
fit1$coefficients
as.numeric(fit1$coefficients)
?numDeriv
library(numDeriv)
?numDeriv
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="listwise",gradFun="numDeriv",hessFun="numDeriv")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="listwise")
summary(fit1)
missing="fiml")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
HS[1:50,1] <- NA
mod <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
x1~0*1
x2~0*1
x3~0*1
x4~0*1
x5~0*1
x6~0*1
x7~0*1
x8~0*1
x9~0*1
'
outt = cfa(mod,HS)
summary(outt)
fitMeasures(outt)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
library(regsem)
?chol
?chol2inv
fit1
chol(fit1$Imp_Cov)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
traceback()
outt@SampleStats@missing[[1]]
outt@SampleStats
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
HS[1:50,1] <- NA
mod <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
x1~0*1
x2~0*1
x3~0*1
x4~0*1
x5~0*1
x6~0*1
x7~0*1
x8~0*1
x9~0*1
'
outt = cfa(mod,HS)
summary(outt)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
library(regsem)
outt = cfa(mod,HS,missing="fiml")
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
summary(fit1)
fit1
summary(outt)
fitMeasures(outt)
outt@SampleStats@nobs[[1]][1]
outt@SampleStats
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
summary(fit1)
fit_indices(fit1)
fit1["Fmin"]
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
summary(fit1)
fitmeasures(outt)
fit1
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
summary(fit1)
fitMeasures(outt)
fitMeasures(outt)
fit_indices(fit1)
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
fit_indices(fit1)
fitmeasures(outt)["unrestricted.logl"]
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
missing="fiml",gradFun="none")
summary(fit1)
library(lavaan)
HS.model <- ' visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data=HolzingerSwineford1939, se="standard",information="observed")
str(fit)
vcov = round(fit@vcov$vcov,4)
hess = lavInspect(fit,"hessian")
library(Matrix)
rankMatrix(hess)
fitmeasures(fit.measures = )
fitmeasures(fit)
vals <- c(0.00001,0.0001,0.001,0.01,0.1,1,3,5,10,20,100)
i=1
set.seed(4536)
population.model <- '
f1 =~ 1*x1 + 0.2*x2 + 1*x3
f2 =~ 1*x4 + 0.2*x5 + 1*x6
f3 =~ 1*x7 + 0.2*x8 + 1*x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
N = 400
fa <-'
f1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6
f2 =~ 1*x4 + x5 + x6 + x7 + x8 + x9
f3 =~ NA*x1 + x2 + x3 + 1*x7 + x8 + x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
myData <- simulateData(population.model, sample.nobs=N)
val = vals[[i]]
outt = bcfa(fa,myData,dp=dpriors("lambda=dnorm(0,val"))
library(blavaan)
outt = bcfa(fa,myData,dp=dpriors("lambda=dnorm(0,val"))
outt = bcfa(fa,myData,dp=dpriors("lambda=dnorm(0,val)"))
outt = bcfa(fa,myData,dp=dpriors(lambda="dnorm(0,val)"))
cat("dnorm(0,",val,")")
prior = cat("dnorm(0,",val,")")
prior = print("dnorm(0,",val,")")
?cat
prior = print0("dnorm(0,",val,")")
prior = cat("dnorm(0,",val,")")
prior = paste("dnorm(0,",val,")")
prior
outt = bcfa(fa,myData,dp=dpriors(lambda=prior))
outt = bcfa(fa,myData,dp=dpriors(lambda=prior))
?bcfa
outt = bcfa(fa,myData,dp=dpriors(lambda=prior),jagcontrol=list(method="rjparallel"))
fitmeasures(outt)
fitm <- fitmeasures(outt)
as.numeric(fitm)
fits <- list()
for(i in 1:length(vals)){
val = vals[[i]]
prior = paste("dnorm(0,",val,")")
outt = bcfa(fa,myData,dp=dpriors(lambda=prior),jagcontrol=list(method="rjparallel"))
fitm <- fitmeasures(outt)
fits[[i]] <- fitm
}
unlist(fits)
fits
data.matrix(unlist(fits))
?data.matrix
fits
matrix(unlist(fits),11,11)
?matrix
matrix(unlist(fits),11,11,byrow=TRUE)
fits2 = matrix(unlist(fits),11,11,byrow=TRUE)
colnames(fits2) <- names(fits[[1]])
fits2
N = 70
fa <-'
f1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6
f2 =~ 1*x4 + x5 + x6 + x7 + x8 + x9
f3 =~ NA*x1 + x2 + x3 + 1*x7 + x8 + x9
f1~~1*f1
f2~~1*f2
f3~~1*f3
f1~~0*f2
f2~~0*f3
f1~~0*f3
'
myData <- simulateData(population.model, sample.nobs=N)
vals <- c(0.00001,0.0001,0.001,0.01,0.1,1,3,5,10,20,100)
# generate data
fits <- list()
for(i in 1:length(vals)){
val = vals[[i]]
prior = paste("dnorm(0,",val,")")
outt = bcfa(fa,myData,dp=dpriors(lambda=prior),jagcontrol=list(method="rjparallel"))
fitm <- fitmeasures(outt)
fits[[i]] <- fitm
}
fits2 = matrix(unlist(fits),11,11,byrow=TRUE)
colnames(fits2) <- names(fits[[1]])
fits2
devtools::use_readme_rmd()
?cfa
library(lavaan)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod,HS,meanstructure=TRUE)
fit1 <- regsem(outt,lambda=0.1,type="lasso",gradFun="ram")
library(regsem)
library(regsem)
fit1 <- regsem(outt,lambda=0.1,type="lasso",gradFun="ram")
summary(fit1)
summary(outt)
?regsem
parTable(outt)
extractMatrices(outt)
fit2 <- regsem(outt,lambda=0.1,type="lasso",pars_pen=c(1:3))
summary(fit2)
?mult_run
?mult_optim
?multi_optim
fit.mult <- multi_optim(outt,lambda=0.4,max.try=10,type="lasso")
summary(fit.mult)
fit.mult <- multi_optim(outt,lambda=0.2,max.try=10,type="lasso")
fit.mult <- multi_optim(outt,lambda=0.15,max.try=10,type="lasso")
fit.mult <- multi_optim(outt,lambda=0.3,max.try=10,type="lasso")
summary(fit.mult)
fit.mult <- multi_optim(outt,lambda=0.3,max.try=40,type="lasso")
fit.mult <- multi_optim(outt,lambda=0.3,max.try=10,type="lasso",tol=1e-04)
fit.mult <- multi_optim(outt,lambda=0.3,max.try=20,type="lasso",tol=1e-04)
fit.mult <- multi_optim(outt,lambda=0.3,max.try=20,type="lasso",tol=1e-02)
fit.mult <- multi_optim(outt,lambda=0.3,max.try=100,type="lasso")
summary(fit.mult)
fit_indices(fit.mult)
library(regsem)
fit_indices(fit.mult)
cv.out = cv_regsem(outt,type="ridge",gradFun="none",n.lambda=10)
cv.out
cv.out[[2]]
cv.out[[2]]$BIC
cv.out[[2]][["BIC"]]
str(cv.out[[2]])
cv.out[[2]][4]
cv.out[[2]][,4]
cv.out[[2]][,"BIC"]
min(cv.out[[2]][,"BIC"])
which(cv.out[[2]][,"BIC"] ==  min.bic)
min.bic <- min(cv.out[[2]][,"BIC"])
which(cv.out[[2]][,"BIC"] ==  min.bic)
loc <- which(cv.out[[2]][,"BIC"] ==  min.bic)
cv.out[[2]][1,]
?cv_regsem
cv.out = cv_regsem(outt,type="ridge",gradFun="none",n.lambda=10,mult.start=TRUE,
fit.ret2="test")
# see rmsea and BIC for each value of lambda
cv.out[[2]]
cv.out = cv_regsem(outt,type="ridge",gradFun="none",n.lambda=10,mult.start=TRUE)
# see rmsea and BIC for each value of lambda
cv.out[[2]]
# lowest
min.bic <- min(cv.out[[2]][,"BIC"])
loc <- which(cv.out[[2]][,"BIC"] ==  min.bic)
cv.out[[2]][1,]
?any
library(regsem)
?cv_regsem
cv.out = cv_regsem(outt,type="ridge",gradFun="none",fit.ret2="test",
n.lambda=10,mult.start=TRUE)
cv.out[[2]]
cv.out = cv_regsem(outt,type="ridge",gradFun="none",fit.ret2="test",
n.lambda=10,mult.start=TRUE)
# see rmsea and BIC for each value of lambda
cv.out[[2]]
fit_indices(fit.mult)
?fit_indices
fit_indices(fit.mult,CV=TRUE)
fit_indices(fit.mult,CV="boot")
fit.mult$SampCov
fit.mult$data
str(outt)
model=outt
model@Data@X
library(regsem)
library(regsem)
fit_indices(fit.mult,CV="boot")
fit_indices(fit.mult,CV="boot")
library(regsem)
fit_indices(fit.mult,CV="boot")
library(regsem)
fit_indices(fit.mult,CV="boot")
library(regsem)
fit_indices(fit.mult,CV="boot")
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod,HS,meanstructure=TRUE)
fit1 <- regsem(outt,lambda=0.1,type="lasso")
summary(fit1)
fit.mult <- multi_optim(outt,lambda=0.3,max.try=100,type="lasso")
fit.mult <- multi_optim(outt,lambda=0.2,max.try=100,type="lasso")
?multi_optim
fit.mult <- multi_optim(outt,lambda=0.2,max.try=100,type="lasso",max.iter=100000)
fit.mult <- multi_optim(outt,lambda=0.2,max.try=100,type="lasso",max.iter=100000,tol=1e-4)
fit.mult <- multi_optim(outt,lambda=0.2,max.try=100,type="lasso",
max.iter=100000,tol=1e-4)
fit.mult <- multi_optim(outt,lambda=0.15,max.try=100,type="lasso",
max.iter=100000,tol=1e-4)
fit_indices(fit.mult,CV="boot")
model=fit.mult
model$data
n.boot=100
model$Imp_Cov
ImpCov = model$Imp_Cov
SampCov = model$SampCov
data <- model$data
#data = model@Data@X[[1]]
ids <- sample(nrow(data),nrow(data),replace=TRUE)
nrow(data)
str(data)
data <- as.data.frame(model@Data@X)
library(regsem)
fit_indices(fit.mult,CV="boot")
fit.mult <- multi_optim(outt,lambda=0.15,max.try=100,type="lasso",
max.iter=100000,tol=1e-4)
summary(fit.mult)
# get fit of model -- using cross-validation
fit_indices(fit.mult,CV="boot")
fit_indices(fit.mult,CV=TRUE)
library(regsem)
cv.out = cv_regsem(outt,type="ridge",gradFun="none",fit.ret2="boot",
n.lambda=10,mult.start=TRUE)
# see rmsea and BIC for each value of lambda
cv.out[[2]]
# lowest
min.bic <- min(cv.out[[2]][,"BIC"])
loc <- which(cv.out[[2]][,"BIC"] ==  min.bic)
cv.out[[2]][1,]
cv.out = cv_regsem(outt,type="ridge",gradFun="none",fit.ret2="boot",
n.lambda=40,mult.start=TRUE)
# see rmsea and BIC for each value of lambda
cv.out[[2]]
# lowest
min.bic <- min(cv.out[[2]][,"BIC"])
loc <- which(cv.out[[2]][,"BIC"] ==  min.bic)
cv.out[[2]][1,]
library(regsem)
?summary.regsem
?regsem
library(regsem)
log(0.5)
log(1)
library(semtree)
?semtree.control
devtools::install_github("RJacobucci/regsem")
install.packages("Rcpp")
install.packages("Rcpp")
library(regsem)
install.packages("Rsolnp")
install.packages("optimx")
library(regsem,quietly=T) # Depends on lavaan
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod,HS,meanstructure=TRUE)
fit1 <- regsem(outt,lambda=0.1,type="lasso")
summary(fit1)
parTable(outt)
# or
extractMatrices(outt) # from regsem, can look at par #'s directly in A or S matrix
# only penalize first 3 loadings
fit2 <- regsem(outt,lambda=0.1,type="lasso",pars_pen=c(1:3))
summary(fit2)
?multi_optim
fit.mult <- multi_optim(outt,lambda=0.15,max.try=100,type="lasso",
max.iter=100000,tol=1e-4)
summary(fit.mult)
# get fit of model -- using bootstrapping (naive)
fit_indices(fit.mult,CV="boot")
cv.out = cv_regsem(outt,type="ridge",gradFun="none",fit.ret2="boot",
n.lambda=40,mult.start=TRUE)
cv.out[[1]]
# see rmsea and BIC for each value of lambda
cv.out[[2]]
# lowest
min.bic <- min(cv.out[[2]][,"BIC"])
loc <- which(cv.out[[2]][,"BIC"] ==  min.bic)
cv.out[[2]][1,]
