}
abline(a=0,b=0)
cv.out <- cv_regsem(lav.out,n.lambda=40,type="ridge",
multi.iter=20,mult.start=TRUE,optMethod="nlminb",gradFun="ram",
jump=0.02,pars_pen=c(1:3,7:9))
cv.out <- cv_regsem(lav.out,n.lambda=40,type="ridge",
multi.iter=20,mult.start=TRUE,optMethod="nlminb",gradFun="none",
jump=0.01,pars_pen=c(1:3,7:9))
coef.mat <- abs(cv.out[[1]][,c(1:3,7:9)])
shrink.vals <- cv.out[[2]][,"lambda"]
for(i in 1:6){
coef.mat[,i] <- coef.mat[,i]/coef.mat[1,i]
}
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=i,col=i)
#points(mat[,(nload)])
}
abline(a=0,b=0)
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",
multi.iter=20,mult.start=TRUE,optMethod="coord_desc",gradFun="ram",
jump=0.01,pars_pen=c(1:3,7:9))
cv.out
coef.mat <- abs(cv.out[[1]][,c(1:3,7:9)])
shrink.vals <- cv.out[[2]][,"lambda"]
for(i in 1:6){
coef.mat[,i] <- coef.mat[,i]/coef.mat[1,i]
}
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=i,col=i)
#points(mat[,(nload)])
}
abline(a=0,b=0)
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=2,lwd=2)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=1+i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2,cex=2)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2,cex=4)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
?plot
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2,cex.lab=2)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2,cex.lab=1.2)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2,cex.lab=1.5)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
cv.out
cv.out[[1]][,1:9]
abs(cv.out[[1]][1:15,1:9])
abs(cv.out[[2][1:15,])
cv.out[[2][1:15,]
cv.out[[2]][1:15,]
cv.out <- cv_regsem(lav.out,n.lambda=40,type="ridge",
multi.iter=20,mult.start=TRUE,optMethod="nlminb",gradFun="ram",
jump=0.01,pars_pen=c(1:3,7:9))
coef.mat <- abs(cv.out[[1]][,c(1:3,7:9)])
shrink.vals <- cv.out[[2]][,"lambda"]
for(i in 1:6){
coef.mat[,i] <- coef.mat[,i]/coef.mat[1,i]
}
plot(shrink.vals,coef.mat[,1],ylim=c(0,1),ylab="Loading/max(Loading)",
xlab="Penalty",type="l",lty=1,col=1,lwd=2,cex.lab=1.5)
for(i in 2:(6)){
lines(shrink.vals,coef.mat[,i],lty=1,col=i,lwd=2)
#points(mat[,(nload)])
}
abline(a=0,b=0)
### cross-validation ####
set.seed(1)
ids <- sample(1:nrow(wisc),120)
wisc.train <- wisc[ids,]
wisc.test <- wisc[-ids,]
fit.lds2 <- lavaan(lds_1, data=wisc.train)
summary(fit.lds2,standardized=TRUE)
cov9 <- cov(wisc.test[,1:4])
cov99 <- cov9 + colMeans(wisc.test[,1:4]) %*% t(colMeans(wisc.test[,1:4]))
cov999 = cbind(cov99,colMeans(wisc.test[,1:4]))
cov9999= rbind(cov999,append(colMeans(wisc.test[,1:4]),1))
out.cv <- cv_regsem(fit.lds2,n.lambda=16,mult.start=TRUE,jump=.05,multi.iter=200,warm.start=TRUE,
type="ridge", gradFun = "none",pars_pen=c(3),fit.ret=c("chisq","df","rmsea","Fmin","CFI","TLI"),
optMethod="nlminb",test.cov=cov9999,fit.ret2="test")
out.cv
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=3,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=3)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=2,y.intersp=.8,lwd=3)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=3,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=3)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.8,y.intersp=.8,lwd=3)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=3,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=3)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=3)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=3,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=3)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=2,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+3),lwd=2)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=2,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+4),lwd=2)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=2,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+1),lwd=2)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),lwd=2,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=2)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5
lwd=2,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=2)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=2)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2.5,col=2,xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
colors()
?col
col()
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2.5,col=heat.colors(1),xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=(i+2),lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
heat.colors(4)
colls <- heat.colors(4)
colls <- heat.colors(4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2.5,col=colls[1],xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=colls[i+1],lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
?heat.colors
colls <- rainbow(4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2.5,col=colls[1],xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=colls[i+1],lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=2:5,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2.5,col=colls[1],xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=colls[i+1],lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=colls,lty=1,cex=1.5,y.intersp=.8,lwd=4)
library(colorspace)
colls <- rainbow_hcl(4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.1,.1),cex.lab=1.5,
lwd=2.5,col=colls[1],xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=colls[i+1],lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=colls,lty=1,cex=1.5,y.intersp=.8,lwd=4)
plot.new()
fits <- out.cv[[2]][,5:8]
fits2 <- data.frame(scale(fits,scale=FALSE))
plot(out.cv[[2]][,"lambda"],fits2[,1],type="l",ylim=c(-.075,.075),cex.lab=1.5,
lwd=2.5,col=colls[1],xlab="Lambda",ylab="Centered Fit",main="Cross Validated Fit")
for(i in 1:3){
lines(out.cv[[2]][,"lambda"],fits2[,1+i],col=colls[i+1],lwd=2.5)
}
abline(h=0,lwd=3)
legend(x=.4,y=-.03,legend=c("RMSEA","Fmin","CFI","TLI"),col=colls,lty=1,cex=1.5,y.intersp=.8,lwd=4)
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- "
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f1~~1*f1"
lav.out <- cfa(mod,HS,meanstructure=TRUE,do.fit = T)
extractMatrices(lav.out)$A
semPlot::semPaths(lav.out,what="std",edge.width=2,edge.color = 1,label.prop=1.5,edge.label.font=3)
cv.out <- cv_regsem(lav.out,n.lambda=40,type="lasso",
multi.iter=20,mult.start=TRUE,optMethod="coord_desc",gradFun="ram",
jump=0.01,pars_pen=c(1:3,7:9))
cv.out
abs(cv.out[[1]])
abs(cv.out[[1]][1:15,])
cv.out[[2]][1:15,]
extractMatrices(lav.out)$A
extractMatrices(lav.out)$A_est
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod2 <- "
f1 =~ NA*x1 + x4 + x5 + x6 + x9
f1~~1*f1"
lav.out2 <- cfa(mod2,HS,meanstructure=TRUE,do.fit = T)
fitmeasures(lav.out2)
fitmeasures(lav.out)
library(regsem)
xx = list()
for(i in 1:100){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3 + 0.8*y4 + 0.5*y5 + 1.5*y6
"
sim.list[[2]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
sim.list[[3]] = paste(paste("f1"," ~ "), reg.list)
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=400,fixed.x=TRUE)
# 40.85 seconds
system.time(lav.out <- lavaan::sem(run.mod,dat,fixed.x=TRUE))
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,momentum=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
library(regsem)
library(lavaan)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
'
outt = cfa(mod,HS,meanstructure=FALSE)
system.time(cfa(mod,HS,meanstructure=TRUE))
summary(outt)
fitMeasures(outt)
library(slam)
A <- extractMatrices(outt)$A
A2 <- as.simple_triplet_matrix(A)
simple_triplet_zero_matrix(A,nrow=nrow(A),ncol=ncol(A))
lower = c(rep(-6,9),rep(1e-6,9))
#lower = rep(-10,18)
upper = rep(10,18)
extractMatrices(outt)$parameters
sav <- lineprof(regsem(outt,lambda=0.9,type="lasso",optMethod="coord_desc",
gradFun="ram",tol=1e-5))
library(lineprof)
fit1 <- regsem::regsem(outt,lambda=0.9,type="lasso",optMethod="coord_desc",
gradFun="ram",tol=1e-5,step.ratio=FALSE,step=.5)
fit_indices(fit1)
fitmeasures(outt)
fit1 <- regsem::regsem(outt,lambda=0,type="lasso",optMethod="coord_desc",
fit1 <- regsem::regsem(outt,lambda=0,type="lasso",optMethod="coord_desc",
gradFun="ram",tol=1e-5,step.ratio=FALSE,step=.5)
fit_indices(outt)
fit_indices(fit1)
fitmeasures
showMethods("fitmeasures")
sav <- lineprof(regsem(outt,lambda=0.9,type="lasso",optMethod="coord_desc",
gradFun="ram",tol=1e-5))
sav[sav$time > .005,]
?nlminb
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,momentum=TRUE,#gradFun="auto",
solver=TRUE,type="lasso",pars_pen=c(6:111)))
library(regsem)
xx = list()
for(i in 1:100){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3 + 0.8*y4 + 0.5*y5 + 1.5*y6
"
sim.list[[2]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
sim.list[[3]] = paste(paste("f1"," ~ "), reg.list)
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=400,fixed.x=TRUE)
# 40.85 seconds
system.time(lav.out <- lavaan::sem(run.mod,dat,fixed.x=TRUE))
# momentum speeds up process
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,momentum=TRUE,#gradFun="auto",
solver=TRUE,type="lasso",pars_pen=c(6:111)))
summary(reg.out)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,momentum=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
system.time(lav.out <- lavaan::sem(run.mod,dat,fixed.x=TRUE))
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
set.seed(4)
xx = list()
for(i in 1:100){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3 + 0.8*y4 + 0.5*y5 + 1.5*y6
"
sim.list[[2]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
sim.list[[3]] = paste(paste("f1"," ~ "), reg.list)
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=400,fixed.x=TRUE)
system.time(lav.out <- lavaan::sem(run.mod,dat,fixed.x=TRUE))
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
summary(lav.out)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
library(regsem)
system.time(reg.out <- regsem(lav.out,lambda=0,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
system.time(reg.out <- regsem(lav.out,lambda=0.05,max.iter=300,tol=1e-4,full=TRUE,#gradFun="auto",
type="lasso",pars_pen=c(6:111)))
summary(reg.out)
library(regsem)
