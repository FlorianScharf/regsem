hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=FALSE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=2,multi_optim=FALSE,step=.1,prerun=FALSE)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=.1,prerun=FALSE)
plot(cv.out4)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=1,prerun=FALSE)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=.1,prerun=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=.1,prerun=FALSE)
plot(cv.out4)
cv.out6 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),fit.ret = c("rmsea", "BIC","ncp"),
optMethod="rsolnp",n.lambda=15,multi_optim=FALSE,warm.start=FALSE)
cv.out5 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),fit.ret = c("rmsea", "BIC","ncp"),
prerun=TRUE,step=1,n.lambda=30,multi_optim=FALSE,warm.start=FALSE)
library(regsem)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=.1,prerun=FALSE)
plot(cv.out4)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.1,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=.1,prerun=FALSE)
plot(cv.out4)
cv.out <- cv_regsem(lav.out,type="lasso",jump=.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",tol=1e-8,
solver=FALSE,gradFun="ram",quasi=FALSE,line.search=FALSE,warm.start=FALSE,
hessFun="none",n.lambda=2)
cv.out <- cv_regsem(lav.out,type="lasso",jump=.01,pars_pen=c(7:9,10:12),optMethod="coord_desc",tol=1e-8,
solver=FALSE,gradFun="ram",quasi=FALSE,line.search=FALSE,warm.start=FALSE,
hessFun="none",n.lambda=15)
plot(cv.out)
cv.out6 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),fit.ret = c("rmsea", "BIC","ncp"),
optMethod="rsolnp",n.lambda=15,multi_optim=FALSE,warm.start=FALSE)
plot(cv.out6)
cv.out5 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),fit.ret = c("rmsea", "BIC","ncp"),
prerun=TRUE,step=1,n.lambda=30,multi_optim=FALSE,warm.start=FALSE)
plot(cv.out5)
cv.out4 <- cv_regsem(lav.out,type="lasso",jump=0.1,pars_pen=c(7:9,10:12),optMethod="coord_desc",#tol=1e-08,
solver=TRUE,gradFun="ram",quasi=FALSE,warm.start=FALSE,fit.ret = c("rmsea", "BIC","ncp"),
hessFun="numDeriv",n.lambda=15,multi_optim=FALSE,step=.1,prerun=FALSE)
plot(cv.out4)
plot(cv.out)
cv.out <- cv_regsem(lav.out,type="lasso",jump=.1,pars_pen=c(7:9,10:12),optMethod="coord_desc",tol=1e-8,
solver=FALSE,gradFun="ram",quasi=FALSE,line.search=FALSE,warm.start=FALSE,
hessFun="none",n.lambda=15)
plot(cv.out)
cv.out6 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),fit.ret = c("rmsea", "BIC","ncp"),
optMethod="rsolnp",n.lambda=15,multi_optim=FALSE,warm.start=FALSE)
cv.out5 <- cv_regsem(lav.out,type="lasso",jump=0.01,pars_pen=c(7:9,10:12),fit.ret = c("rmsea", "BIC","ncp"),
prerun=TRUE,step=1,n.lambda=30,multi_optim=FALSE,warm.start=FALSE)
cv.out <- cv_regsem(lav.out,type="lasso",jump=.1,pars_pen=c(7:9,10:12),optMethod="coord_desc",tol=1e-8,
solver=FALSE,gradFun="ram",quasi=FALSE,line.search=FALSE,warm.start=FALSE,
hessFun="none",n.lambda=15)
library(regsem)
xx = list()
for(i in 1:70){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 0.8*y3 + 0.8*y4 + 0.5*y5 + 0.5*y6
"
sim.list[[2]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[3]] = "
f1 ~ 0.2*x71 + 0.2*x72 + 0.2*x73 + 0.2*x74 + 0.2*x75 + 0.2*x76 + 0.2*x77 + 0.2*x78 + 0.2*x79 + 0.2*x80
"
sim.list[[4]] = "
f1 ~ 0.5*x81 + 0.5*x82 + 0.5*x83 + 0.5*x84 + 0.5*x85 + 0.5*x86 + 0.5*x87 + 0.5*x88 + 0.5*x89 + 0.5*x90
"
sim.list[[5]] = "
f1 ~ 0.8*x91 + 0.8*x92 + 0.8*x93 + 0.8*x94 + 0.8*x95 + 0.8*x96 + 0.8*x97 + 0.8*x98 + 0.8*x99 + 0.8*x100
"
xxx = list()
for(i in 1:100){
xxx[i] = paste("x", i, sep = "")
}
uuu = list()
for(i in 1:length(xxx)){
uuu[i] = paste(1,"*",xxx[i],sep="")
}
jjj = list()
for(i in 1:(length(xxx))){
jjj[i] = paste(xxx[i],"~~",1,"*",xxx[i],sep="")
}
sim.list[[7]] = paste(jjj,collapse=";")
val1 = 0.7
kkk = list()
count=0
for(i in 1:100){
for(j in 1:100){
if(i != j & j > i){
count = count+1
kkk[count] = paste(xxx[i],"~~",val1,"*",xxx[j],sep="")
}
}
}
sim.list[[8]] = paste(kkk,collapse=";")
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xxx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ NA*y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "f1~~1*f1"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=150,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
#run.mod2 <- gsub("x100",paste(round(coef(lav.out)[106],3),"*x100"),run.mod)
#lav.out2 <- try(lavaan::sem(run.mod2,dat2,fixed.x=TRUE),silent=TRUE)
mat <- extractMatrices(lav.out)
# options(max.print=10000000)
enet.sim <- cv_regsem(lav.out,n.lambda=10,jump=.1,type="lasso",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",
fit.ret=c("BIC","rmsea","AIC","CAIC","EBIC.5","EBIC.25"))
library(caret);library(randomForest)
# read in data
# need foreign package to read spss data files
#install.packages("foreign")
library(foreign)
# Screener Database_Downloaded_11.2.16_OnlyNSSI for RF_Only RF Variables for Ross
dat <- read.spss(file.choose(),to.data.frame=TRUE)
head(dat)
dat$NSSI_Hx <- as.factor(dat$NSSI_Hx)
dat$NSSI_LastYr <- as.factor(dat$NSSI_LastYr)
dat$Age <- as.numeric(as.character(dat$Age))
summary(dat)
load("C:/Users/rjacobuc/Dropbox/taylor_rf/first_draft/PROJECT2/taylor_abct_mod1.Rdata")
plot(rf.out2)
plot(rf.out111)
rf.out111
varImp(rf.out111)
plot(varImp(rf.out111))
load("C:/Users/rjacobuc/Dropbox/taylor_rf/first_draft/PROJECT2/taylor_abct_mod2.Rdata")
varImp(rf.out2)
All 6 indicators have simulated loadings of 1
library(regsem)
xx = list()
for(i in 1:70){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 0.8*y3 + 0.8*y4 + 0.5*y5 + 0.5*y6
"
sim.list[[2]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[3]] = "
f1 ~ 0.2*x71 + 0.2*x72 + 0.2*x73 + 0.2*x74 + 0.2*x75 + 0.2*x76 + 0.2*x77 + 0.2*x78 + 0.2*x79 + 0.2*x80
"
sim.list[[4]] = "
f1 ~ 0.5*x81 + 0.5*x82 + 0.5*x83 + 0.5*x84 + 0.5*x85 + 0.5*x86 + 0.5*x87 + 0.5*x88 + 0.5*x89 + 0.5*x90
"
sim.list[[5]] = "
f1 ~ 0.8*x91 + 0.8*x92 + 0.8*x93 + 0.8*x94 + 0.8*x95 + 0.8*x96 + 0.8*x97 + 0.8*x98 + 0.8*x99 + 0.8*x100
"
xxx = list()
for(i in 1:100){
xxx[i] = paste("x", i, sep = "")
}
uuu = list()
for(i in 1:length(xxx)){
uuu[i] = paste(1,"*",xxx[i],sep="")
}
jjj = list()
for(i in 1:(length(xxx))){
jjj[i] = paste(xxx[i],"~~",1,"*",xxx[i],sep="")
}
sim.list[[7]] = paste(jjj,collapse=";")
val1 = 0.7
kkk = list()
count=0
for(i in 1:100){
for(j in 1:100){
if(i != j & j > i){
count = count+1
kkk[count] = paste(xxx[i],"~~",val1,"*",xxx[j],sep="")
}
}
}
sim.list[[8]] = paste(kkk,collapse=";")
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xxx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ NA*y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "f1~~1*f1"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=150,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
#run.mod2 <- gsub("x100",paste(round(coef(lav.out)[106],3),"*x100"),run.mod)
#lav.out2 <- try(lavaan::sem(run.mod2,dat2,fixed.x=TRUE),silent=TRUE)
mat <- extractMatrices(lav.out)
# options(max.print=10000000)
?cv_regsem
enet.sim <- cv_regsem(lav.out,n.lambda=10,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="cv",
fit.ret=c("chisq"))
enet.sim <- cv_regsem(lav.out,n.lambda=10,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="cv",
fit.ret=c("bic","rmsea","chisq"))
enet.sim <- cv_regsem(lav.out,n.lambda=10,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="cv",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
plot(enet.sim)
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=10,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
library(regsem)
library(regsem)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100)
# check parameter numbers
extractMatrices(outt)["A"]
# equivalent to
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
outt = cfa(mod,HS)
cv.out = cv_regsem(outt, type="ridge", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=100)
summary(cv.out)
plot(cv.out, show.minimum="BIC")
cv.out = cv_regsem(outt, type="ridge", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=150)
warnings()
plot(cv.out, show.minimum="BIC")
cv.out
cv.out = cv_regsem(outt, type="lasso", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=150)
summary(cv.out)
plot(cv.out, show.minimum="BIC")
warnings(
)
cv.out = cv_regsem(outt, type="lasso", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=150,optMethod="rsolnp")
plot(cv.out, show.minimum="BIC")
library(regsem)
cv.out = cv_regsem(outt, type="lasso", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=150)
plot(cv.out, show.minimum="BIC")
cv.out = cv_regsem(outt, type="ridge", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=150)
plot(cv.out, show.minimum="BIC")
cv.out$paramaters[50:100,]
cv.out$paramaters
cv.out
cv.out$parameters
cv.out$parameters[50:70,]
cv.out$parameters[50:90,]
cv.out$parameters[70:110,]
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
#' # Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, optMethod="csolnp")
outt
#' # Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="lasso",optMethod="csolnp",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(nloptr)
fit1 <- regsem(outt, lambda=0.05, type="lasso",optMethod="slsqp",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",optMethod="slsqp",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",optMethod="slsqp",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",optMethod="slsqp",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
cv.out = cv_regsem(outt, type="ridge", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=150,optMethod="slsqp")
summary(cv.out)
plot(cv.out, show.minimum="BIC")
cv.out
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100)
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100,optMethod="slsqp")
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8),
n.lambda=100,optMethod="coord_desc",prerun=FALSE)
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8),
n.lambda=100,optMethod="coord_desc",prerun=TRUE)
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), tol=1e-8,
n.lambda=100,optMethod="coord_desc",prerun=FALSE)
plot(cv.out)
cv.out
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
xx = list()
for(i in 1:70){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 0.8*y3 + 0.8*y4 + 0.5*y5 + 0.5*y6
"
sim.list[[2]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[3]] = "
f1 ~ 0.2*x71 + 0.2*x72 + 0.2*x73 + 0.2*x74 + 0.2*x75 + 0.2*x76 + 0.2*x77 + 0.2*x78 + 0.2*x79 + 0.2*x80
"
sim.list[[4]] = "
f1 ~ 0.5*x81 + 0.5*x82 + 0.5*x83 + 0.5*x84 + 0.5*x85 + 0.5*x86 + 0.5*x87 + 0.5*x88 + 0.5*x89 + 0.5*x90
"
sim.list[[5]] = "
f1 ~ 0.8*x91 + 0.8*x92 + 0.8*x93 + 0.8*x94 + 0.8*x95 + 0.8*x96 + 0.8*x97 + 0.8*x98 + 0.8*x99 + 0.8*x100
"
xxx = list()
for(i in 1:100){
xxx[i] = paste("x", i, sep = "")
}
uuu = list()
for(i in 1:length(xxx)){
uuu[i] = paste(1,"*",xxx[i],sep="")
}
jjj = list()
for(i in 1:(length(xxx))){
jjj[i] = paste(xxx[i],"~~",1,"*",xxx[i],sep="")
}
sim.list[[7]] = paste(jjj,collapse=";")
val1 = 0.7
kkk = list()
count=0
for(i in 1:100){
for(j in 1:100){
if(i != j & j > i){
count = count+1
kkk[count] = paste(xxx[i],"~~",val1,"*",xxx[j],sep="")
}
}
}
sim.list[[8]] = paste(kkk,collapse=";")
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xxx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ NA*y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "f1~~1*f1"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=150,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
dat <- simulateData(pop.mod,sample.nobs=100,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
?lavaan
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE),silent=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
dat <- simulateData(pop.mod,sample.nobs=150,seed=1,model.type="lavaan")
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE),silent=TRUE)
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions(do.fit=FALSE)),silent=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions(do.fit=FALSE))
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions("do.fit=FALSE"))
lavOptions("do.fit=FALSE")
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE)
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions=list("do.fit=FALSE"))
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions=list(do.fit=FALSE))
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions("do.fit",FALSE))
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="slsqp")
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
dat <- simulateData(pop.mod,sample.nobs=120,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.5,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.5,
pars_pen=c(7:106),optMethod="slsqp",warm.start = FALSE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0,
pars_pen=c(7:106),optMethod="rsolnp",warm.start = FALSE)
enet.sim
dat <- simulateData(pop.mod,sample.nobs=300,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=TRUE)
lav.out
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0,
fit.ret2="cv",fit.ret=c("BIC","ncp","rmsea"),metric="ncp",
pars_pen=c(7:106),optMethod="rsolnp",warm.start = FALSE)
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0,
fit.ret2="boot",fit.ret=c("BIC","ncp","rmsea"),metric="ncp",
pars_pen=c(7:106),optMethod="rsolnp",warm.start = FALSE)
enet.sim
library(regsem)
