plot(cv.out3)
cv.out3$final_pars
# identifies specific factors
# graphical model
library(bootnet)
ggm.out2 <- estimateNetwork(dat2,default="EBICglasso")
plot(ggm.out2)
cv.out3$final_pars
ggm.out1 <- estimateNetwork(dat,default="EBICglasso")
plot(ggm.out1)
sim.mod <-"
f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 + x6
f3 =~ x7 + x8 + x9
f1~~0.8*f2;f2~~0.8*f3;f1~~0.8*f3
"
dat <- simulateData(sim.mod,model.type="cfa")
ggm.out1 <- estimateNetwork(dat,default="EBICglasso")
plot(ggm.out1)
mod2 <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
x1~~x2;x1~~x3;x2~~x3;x1~~x4;x2~~x4;x3~~x4;
x1~~x5;x2~~x5;x3~~x5;x4~~x5;x1~~x6;x2~~x6;x3~~x6;
x4~~x6;x5~~x6;x1~~x7;x2~~x7;x3~~x7;x4~~x7;x5~~x7;
x6~~x7;x1~~x8;x2~~x8;x3~~x8;x4~~x8;x5~~x8;x6~~x8;
x7~~x8;x1~~x9;x2~~x9;x3~~x9;x4~~x9;x5~~x9;x6~~x9;
x7~~x9;x8~~x9;
f~~1*f
'
sim.run2 <- cfa(mod2,dat)
summary(sim.run2,fit=T)
cv.out2 = cv_regsem(sim.run2,type="lasso", pars_pen=c(10:45),optMethod="rsolnp",
n.lambda=20,jump=0.05)
warnings(0)
warnings()
cv.out2$final_pars
summary(sim.run2,fit=T)
mod2.1 <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
'
sim.run2.1 <- cfa(mod2.1,dat)
summary(sim.run2.1,fit=T)
install.packages("fanc")
library(fanc)
?fanc
fanc.out1 <- fanc(dat,2)
fanc.out1 <- fanc(as.matrix(dat),2)
fanc.out1
plot(fanc.out1)
plot(ggm.out1)
fanc.out1 <- fanc(as.matrix(dat),3)
plot(fanc.out1)
fanc.out2 <- fanc(as.matrix(dat2),3)
plot(fanc.out1)
fanc.out2 <- fanc(as.matrix(dat2),4)
plot(fanc.out1)
plot(fanc.out2)
fanc.out3 <- fanc(as.matrix(dat33),2)
plot(fanc.out3)
mod33.2 <- '
f1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10
f1 =~ NA*x1 + x2 + x3 + x4 + x5 + 1*x6 + x7 + x8 + x9 + x10
'
sim.run33.2 <- cfa(mod33.2,dat33)
mod33.2 <- '
f1 =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10
f2 =~ NA*x1 + x2 + x3 + x4 + x5 + 1*x6 + x7 + x8 + x9 + x10
'
sim.run33.2 <- cfa(mod33.2,dat33)
summary(sim.run33.2,fit=T)
extractMatrices(sim.run33.2)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05)
?cv_regsem
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start=0)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start=0,lambda.start=0.2)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0.2)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="slsqp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0.2)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="NlcOptim",
n.lambda=20,jump=0.05,Start="default",lambda.start=0.2)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0.2)
summary(sim.run33.2,fit=T)
sim.run33.2 <- cfa(mod33.2,dat33,do.fit=F)
summary(sim.run33.2,fit=T)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0.2)
plot(cv.out33.2)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0)
plot(cv.out33.2)
cv.out33.2
?cv_regsem
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("TLI"))
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="TLI",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("TLI"))
plot(cv.out33.2)
cv.out33.2
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="ncp",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("ncp"))
plot(cv.out33.2)
cv.out33.2
plot(cv.out33.2)
plot(cv.out33.2,show.minimum="ncp")
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="Fmin",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("Fmin"))
plot(cv.out33.2,show.minimum="Fmin")
cv.out33.2
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq"))
cv.out33.2
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq","df"))
cv.out33.2
r.out <-regsem(sim.run33.2,type="lasso",pars_pen=c(1:18))
r.out
r.out$df
r.out <-regsem(sim.run33.2,type="lasso",pars_pen=c(1:18),lambda=0.2)
r.out$df
r.out <-regsem(sim.run33.2,type="lasso",pars_pen=c(1:18),lambda=0.2)
plot(cv.out33.2,show.minimum="Fmin")
library(regsem)
r.out <-regsem(sim.run33.2,type="lasso",pars_pen=c(1:18),lambda=0.2)
str(sim.run33.2)
sim.run33.2@Fit@test[[1]]$df
sim.run33.2 <- cfa(mod33.2,dat33,do.fit=F)
sim.run33.2 <- cfa(mod33.2,dat33,do.fit=T)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq","df"))
r.out <-regsem(sim.run33.2,type="lasso",pars_pen=c(1:18),Start="default")
r.out
summary(r.out)
summary(sim.run33.2,fit=T)
sim.run33.2 <- cfa(mod33.2,dat33,do.fit=F)
?cv_regsem
library(regsem)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq","df"))
library(regsem)
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq","df"))
plot(cv.out33.2,show.minimum="Fmin")
plot(cv.out33.2,show.minimum="chisq")
?cv_regsem
cv.out33.2 = cv_regsem(sim.run33.2,type="lasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",fit.ret2="boot",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq","df"))
plot(cv.out33.2,show.minimum="chisq")
cv.out33.2
cv.out33.2 = cv_regsem(sim.run33.2,type="alasso", pars_pen=c(1:18),optMethod="rsolnp",metric="chisq",fit.ret2="boot",
n.lambda=20,jump=0.05,Start="default",lambda.start=0,fit.ret = c("chisq","df"))
plot(cv.out33.2,show.minimum="chisq")
cv.out33.2
library(regsem)
library(regsem)
#setwd("G:/Camcan/sandbox/rk02/HugoRoss")
library(lavaan)
library(qgraph)
library(semPlot)
library(psych)
library(regsem)
library(lmtest)
library(ggplot2)
library(reshape2)
library(semTools)
#Here one reads in the data - As I can't share it yet I created a dummy dataset with same means and covs.
#Parameter estimates are identical down to the third decimal so for now we can just use the dummy data (for final paper just rerun with the 'real' - only difference would be skewness and nonlinearities but those are negligible)
#datacamcan<-read.csv('CamCAN_cogneuro_data_Ross2017-03-16.csv')  #Reads in real data
datacamcan<-read.csv('schmamcandat2017-03-16.csv')
getwd()
setwd("C:/Users/rjacobuc/Documents/GitHub/mimic_regsem2/synthetic_analysis")
#datacamcan<-read.csv('CamCAN_cogneuro_data_Ross2017-03-16.csv')  #Reads in real data
datacamcan<-read.csv('schmamcandat2017-03-16.csv')                #Reads in simulated data based on MVRnorm
colnames(datacamcan)[3:50]<-print(paste('gm',1:48,sep=''))        #Unify grey matter labels for easier syntax
colnames(datacamcan)[51:98]<-print(paste('fa',1:48,sep=''))       #Unify grey matter labels for easier syntax
datacamcan$simpred1<-datacamcan$VSTMcolour_K_ss3+rnorm(708,.5,.5) #add dummy predictors for reference
datacamcan$simpred2<-datacamcan$VSTMcolour_K_ss3+rnorm(708,.5,.5) #add dummy predictors for reference
#Below the syntax to fit normal ML and regsem MIMIC models to predict a single LV (vstmlv) measured by three observables
#Syntax below is to use white matter (fa) and grey matter (gm) to predict a single LV.
#Total R^2 for FA predicting vstmlv is ~38% (versus 8% with noise), and ~27% for gm
#Most exciting would be to include both of course
colnames(datacamcan)
# standardize variables
X = as.matrix(datacamcan[,99:101])
cov = as.matrix(datacamcan[,51:98])
data.std <- data.frame(scale(datacamcan[,c(51:98,99:101)]))
#############Predicting VSTM: White matter (48 ROIS)
vstmCFA_WM<-'
vstmlv=~VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=datacamcan)
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
fitvstm_WM <- cfa(vstmCFA_WM, data=datacamcan,fixed.x=T)
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
reg.out <- cv_regsem(lav.out_WM,n.lambda=30,jump=0.001,type="lasso",pars_pen="regressions")
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.001,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.003,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.007,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=40,jump=0.007,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.007,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
colnames(datacamcan)
# standardize variables
X = as.matrix(datacamcan[,99:101])
cov = as.matrix(datacamcan[,c(51:98,104:151)])
data.std <- data.frame(scale(datacamcan[,c(51:98,99:101,104:151)]))
#############Predicting VSTM: White matter (48 ROIS)
vstmCFA_WM<-'
vstmlv=~VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +
fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48 +
noise 1 +noise 2 +noise 3 +noise 4 +noise 5 +noise 6 +noise 7 +noise 8 +noise 9 +noise 10 +noise 11 +noise 12 +noise 13 +noise 14 +noise 15 +noise 16 +noise 17 +noise 18 +noise 19 +noise 20 +noise 21 +noise 22 +noise 23 +noise 24 +noise 25 +
noise 26 +noise 27 +noise 28 +noise 29 +noise 30 +noise 31 +noise 32 +noise 33 +noise 34 +noise 35 +noise 36 +noise 37 +noise 38 +noise 39 +noise 40 +noise 41 +noise 42 +noise 43 +noise 44 +noise 45 +noise 46 +noise 47 +noise 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=datacamcan,fixed.x=T)
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.007,type="lasso",pars_pen="regressions")
vstmCFA_WM<-'
vstmlv=~NA*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +
fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48 #+
#noise 1 +noise 2 +noise 3 +noise 4 +noise 5 +noise 6 +noise 7 +noise 8 +noise 9 +noise 10 +noise 11 +noise 12 +noise 13 +noise 14 +noise 15 +noise 16 +noise 17 +noise 18 +noise 19 +noise 20 +noise 21 +noise 22 +noise 23 +noise 24 +noise 25 +
#noise 26 +noise 27 +noise 28 +noise 29 +noise 30 +noise 31 +noise 32 +noise 33 +noise 34 +noise 35 +noise 36 +noise 37 +noise 38 +noise 39 +noise 40 +noise 41 +noise 42 +noise 43 +noise 44 +noise 45 +noise 46 +noise 47 +noise 48
vstmlv~~1*vstmlv
'
fitvstm_WM <- cfa(vstmCFA_WM, data=datacamcan,fixed.x=T)
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.007,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out
setwd("C:/Users/rjacobuc/Documents/GitHub/mimic_regsem2/final_real_analysis")
library(lavaan)
library(qgraph)
library(semPlot)
library(psych)
library(regsem)
library(lmtest)
library(ggplot2)
library(reshape2)
library(semTools)
#Here one reads in the data - As I can't share it yet I created a dummy dataset with same means and covs.
#Parameter estimates are identical down to the third decimal so for now we can just use the dummy data (for final paper just rerun with the 'real' - only difference would be skewness and nonlinearities but those are negligible)
datacamcan<-read.csv('CamCAN_cogneuro_data_Ross2017-03-16.csv')  #Reads in real data
#datacamcan<-read.csv('schmamcandat2017-03-16.csv')
colnames(datacamcan)[2:49]<-print(paste('gm',1:48,sep=''))        #Unify grey matter labels for easier syntax
colnames(datacamcan)[50:97]<-print(paste('fa',1:48,sep=''))       #Unify grey matter labels for easier syntax
datacamcan$simpred1<-datacamcan$VSTMcolour_K_ss3+rnorm(708,.5,.5) #add dummy predictors for reference
datacamcan$simpred2<-datacamcan$VSTMcolour_K_ss3+rnorm(708,.5,.5) #add dummy predictors for reference
#Below the syntax to fit normal ML and regsem MIMIC models to predict a single LV (vstmlv) measured by three observables
#Syntax below is to use white matter (fa) and grey matter (gm) to predict a single LV.
#Total R^2 for FA predicting vstmlv is ~38% (versus 8% with noise), and ~27% for gm
#Most exciting would be to include both of course
# standardize variables
X = as.matrix(datacamcan[,100:102])
cov = as.matrix(datacamcan[,50:97])
data.std <- data.frame(scale(datacamcan[,c(50:97,100:102)]))
library(corrplot)
?corrplot
corrplot(cor(data.std,use="complete.obs"))
#############Predicting VSTM: White matter (48 ROIS)
vstmCFA_WM<-'
vstmlv=~NA*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~~1*vstmlv
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=data.std, estimator='mlr',missing='fiml')
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
#regsem
lav.out_WM<-try(lavaan::sem(vstmCFA_WM,data.std,fixed.x=TRUE,meanstructure=FALSE),silent=TRUE)
A <- extractMatrices(lav.out_WM)$A
A[A!=0]
#cov.test= cov(data.test[,c(51:98,100:102)],use="complete.obs")
#tt = regsem(lav.out_WM)
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=25,jump=.02,type="lasso",pars_pen="regressions",#c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"))
plot(reg.out1_WM)
vstmCFA_WM<-'
vstmlv=~1*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~~vstmlv
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=data.std, estimator='mlr',missing='fiml')
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
#regsem
lav.out_WM<-try(lavaan::sem(vstmCFA_WM,data.std,fixed.x=TRUE,meanstructure=FALSE),silent=TRUE)
A <- extractMatrices(lav.out_WM)$A
A[A!=0]
#cov.test= cov(data.test[,c(51:98,100:102)],use="complete.obs")
#tt = regsem(lav.out_WM)
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=25,jump=.02,type="lasso",pars_pen="regressions",#c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"))
plot(reg.out1_WM)
summary(reg.out1_WM)
reg.out1_WM
x <- rnorm(100)
x <- rnorm(100)
y <- 0.5*x + rnorm(100,0,.5)
cor(x,y)
y <- 0.5*x + rnorm(100,0,.707)
cor(x,y)
y <- 0.707*x + rnorm(100,0,.707)
cor(x,y)
y <- 0.25*x + rnorm(100,0,.707)
cor(x,y)
summary(lm(y~x))
lm.mod <-"
y~x"
lm.out <- sem(lm.mod,data.frame(y,x))
summary(lm.out)
lm.mod <-"
y~x
y~~1*y"
lm.out <- sem(lm.mod,data.frame(y,x))
summary(lm.out)
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
vstmCFA_WM<-'
vstmlv=~NA*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~~1*vstmlv
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=data.std, estimator='mlr',missing='fiml')
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
reg.out1_WM
vstmCFA_WM<-'
vstmlv=~NA*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~~1*vstmlv
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=data.std, estimator='mlr',missing='fiml')
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=25,jump=.02,type="lasso",pars_pen="regressions",#c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"))
reg.out1_WM
lav.out_WM<-try(lavaan::sem(vstmCFA_WM,data.std,fixed.x=TRUE,meanstructure=FALSE),silent=TRUE)
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=25,jump=.02,type="lasso",pars_pen="regressions",#c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"))
reg.out1_WM
#############Predicting VSTM: White matter (48 ROIS)
# -------------- add in noise variables to try and fool procedure
vstmCFA_WM<-'
vstmlv=~NA*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +
fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48 #+
#noise 1 +noise 2 +noise 3 +noise 4 +noise 5 +noise 6 +noise 7 +noise 8 +noise 9 +noise 10 +noise 11 +noise 12 +noise 13 +noise 14 +noise 15 +noise 16 +noise 17 +noise 18 +noise 19 +noise 20 +noise 21 +noise 22 +noise 23 +noise 24 +noise 25 +
#noise 26 +noise 27 +noise 28 +noise 29 +noise 30 +noise 31 +noise 32 +noise 33 +noise 34 +noise 35 +noise 36 +noise 37 +noise 38 +noise 39 +noise 40 +noise 41 +noise 42 +noise 43 +noise 44 +noise 45 +noise 46 +noise 47 +noise 48
vstmlv~~1*vstmlv
'
fitvstm_WM <- cfa(vstmCFA_WM, data=data.std,fixed.x=T)
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
semPaths(fitvstm_WM)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.007,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out <- cv_regsem(fitvstm_WM,n.lambda=30,jump=0.01,type="lasso",pars_pen="regressions")
plot(reg.out)
reg.out
library(lme4)
?lmer
?lme
library(regsem)
library(rmarkdown)
library(regsem)
vignette("regsem")
vignette("overview")
?vignette
vignette("overview",regsem)
vignette("overview",package=regsem)
vignette(package=regsem)
vignette(package="regsem")
vignette("overview",package="regsem")
library(regsem)
vignette("overview",package="regsem")
library(regsem)
library(regsem)
library(regsem)
knit_with_parameters('~/GitHub/regsem/vignettes/short_intro.Rmd')
unlink('~/GitHub/regsem/vignettes/short_intro_cache', recursive = TRUE)
library(regsem)
sim.mod <- "
f1 =~ 1*y1 + 1*y2 + 1*y3+ 1*y4 + 1*y5
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0.2*x6 + 0.5*x7 + 0.8*x8
f1~~1*f1"
dat.sim = simulateData(sim.mod,sample.nobs=60)
run.mod <- "
f1 =~ NA*y1 + y2 + y3+ y4 + y5
f1 ~ c1*x1 + c2*x2 + c3*x3 + c4*x4 + c5*x5 + c6*x6 + c7*x7 + c8*x8
f1~~1*f1
"
lav.out <- sem(run.mod,dat.sim,fixed.x=FALSE)
#summary(lav.out)
parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
reg.out$final_pars
reg.out$final_pars[1:5]
lav.out2 <- sem(run.mod,dat.sim,fixed.x=TRUE)
#summary(lav.out)
parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out2 <- cv_regsem(lav.out2,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
reg.out2$final_pars[1:5]
ret.mat <- matrix(NA,100,5)
ret.mat2 <- matrix(NA,100,5)
for(i in 1:100){
library(regsem)
sim.mod <- "
f1 =~ 1*y1 + 1*y2 + 1*y3+ 1*y4 + 1*y5
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0.2*x6 + 0.5*x7 + 0.8*x8
f1~~1*f1"
dat.sim = simulateData(sim.mod,sample.nobs=60)
run.mod <- "
f1 =~ NA*y1 + y2 + y3+ y4 + y5
f1 ~ c1*x1 + c2*x2 + c3*x3 + c4*x4 + c5*x5 + c6*x6 + c7*x7 + c8*x8
f1~~1*f1
"
lav.out <- sem(run.mod,dat.sim,fixed.x=FALSE)
#summary(lav.out)
#parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
ret.mat[i,] = reg.out$final_pars[1:5]
lav.out2 <- sem(run.mod,dat.sim,fixed.x=TRUE)
#summary(lav.out)
#parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out2 <- cv_regsem(lav.out2,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
ret.mat2[i,] = reg.out2$final_pars[1:5]
}
ret.mat <- matrix(NA,100,5)
ret.mat2 <- matrix(NA,100,5)
for(i in 1:100){
library(regsem)
sim.mod <- "
f1 =~ 1*y1 + 1*y2 + 1*y3+ 1*y4 + 1*y5
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0.2*x6 + 0.5*x7 + 0.8*x8
f1~~1*f1"
dat.sim = simulateData(sim.mod,sample.nobs=100)
run.mod <- "
f1 =~ NA*y1 + y2 + y3+ y4 + y5
f1 ~ c1*x1 + c2*x2 + c3*x3 + c4*x4 + c5*x5 + c6*x6 + c7*x7 + c8*x8
f1~~1*f1
"
lav.out <- sem(run.mod,dat.sim,fixed.x=FALSE)
#summary(lav.out)
#parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
ret.mat[i,] = reg.out$final_pars[1:5]
lav.out2 <- sem(run.mod,dat.sim,fixed.x=TRUE)
#summary(lav.out)
#parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out2 <- cv_regsem(lav.out2,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
ret.mat2[i,] = reg.out2$final_pars[1:5]
}
ret.mat1
ret.mat
summary(reg.mat)
summary(ret.mat)
summary(ret.mat2)
ret.mat <- matrix(NA,100,5)
ret.mat2 <- matrix(NA,100,5)
for(i in 1:100){
library(regsem)
sim.mod <- "
f1 =~ 1*y1 + 1*y2 + 1*y3+ 1*y4 + 1*y5
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0.2*x6 + 0.5*x7 + 0.8*x8
f1~~1*f1
x1~~0.5*x2;x1~~0.5*x3;x1~~0.5*x4;x1~~0.5*x5;x1~~0.5*x6;x1~~0.5*x7;x1~~0.5*x8
x2~~0.5*x3;x2~~0.5*x4;x2~~0.5*x5;x2~~0.5*x6;x2~~0.5*x7;x2~~0.5*x8
x3~~0.5*x4;x3~~0.5*x5;x3~~0.5*x6;x3~~0.5*x7;x3~~0.5*x8
x4~~0.5*x5;x4~~0.5*x6;x4~~0.5*x7;x4~~0.5*x8
x5~~0.5*x6;x5~~0.5*x7;x5~~0.5*x8
x6~~0.5*x7;x6~~0.5*x8
x7~~0.5*x8"
dat.sim = simulateData(sim.mod,sample.nobs=100)
run.mod <- "
f1 =~ NA*y1 + y2 + y3+ y4 + y5
f1 ~ c1*x1 + c2*x2 + c3*x3 + c4*x4 + c5*x5 + c6*x6 + c7*x7 + c8*x8
f1~~1*f1
"
lav.out <- sem(run.mod,dat.sim,fixed.x=FALSE)
#summary(lav.out)
#parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out <- cv_regsem(lav.out,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
ret.mat[i,] = reg.out$final_pars[1:5]
lav.out2 <- sem(run.mod,dat.sim,fixed.x=TRUE)
#summary(lav.out)
#parameterestimates(lav.out)[6:13,] # just look at regressions
reg.out2 <- cv_regsem(lav.out2,n.lambda=50,type="lasso",jump=0.03,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
ret.mat2[i,] = reg.out2$final_pars[1:5]
}
summary(ret.mat)
summary(ret.mat2)
