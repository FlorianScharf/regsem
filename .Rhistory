0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
x29~~0.95*x30
x29~~1*x29
x30~~1*x30
'
dat <- simulateData(population.model,sample.nobs=100)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
'
lav.out = lavaan::sem(lav.mod,dat)
system.time(lavaan::sem(lav.mod,dat))
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:96),type="lasso",
max.try=100,gradFun="ram")
library(regsem)
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:96),type="lasso",
max.try=100,gradFun="ram")
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:96),type="lasso",
max.try=100,gradFun="ram",LB=lower)
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:96),type="ridge",
max.try=100,gradFun="none",LB=lower)
summary(reg.out)
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 1*x1 + 1*x2 + 1*x3 + 1*x4 + 1*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30+
0*x31 + 0*x32 + 0*x33 + 0*x34 + 0*x35 + 0*x36 + 0*x37 + 0*x38 + 0*x39 + 0*x40 + 0*x41 +
0*x42 + 0*x43 + 0*x44 + 0*x45 + 0*x46 + 0*x47 + 0*x48 + 0*x49 + 0*x50
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 1*x25 + 1*x26 + 1*x27 + 1*x28 + 1*x29 + 1*x30+
0*x31 + 0*x32 + 0*x33 + 0*x34 + 0*x35 + 0*x36 + 0*x37 + 0*x38 + 0*x39 + 0*x40 + 0*x41 +
0*x42 + 0*x43 + 0*x44 + 0*x45 + 0*x46 + 0*x47 + 0*x48 + 0*x49 + 0*x50
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30+
0*x31 + 0*x32 + 0*x33 + 0*x34 + 0*x35 + 0*x36 + 0*x37 + 0*x38 + 0*x39 + 0*x40 + 0*x41 +
0*x42 + 0*x43 + 0*x44 + 0*x45 + 1*x46 + 1*x47 + 1*x48 + 1*x49 + 1*x50
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30 +
x31 + x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 + x40 + x41 +
x42 + x43 + x44 + x45 + x46 + x47 + x48 + x49 + x50
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30 +
x31 + x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 + x40 + x41 +
x42 + x43 + x44 + x45 + x46 + x47 + x48 + x49 + x50
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30 +
x31 + x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 + x40 + x41 +
x42 + x43 + x44 + x45 + x46 + x47 + x48 + x49 + x50
'
lav.out = lavaan::sem(lav.mod,dat)
extractMatrices(lav.out)$A
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:156),type="ridge",
max.try=100,gradFun="none",LB=lower)
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:156),type="ridge",
max.try=100,gradFun="none")
summary(lav.out)
vars = rep(1:100)
?gsub
grep("[a-z]", letters)
uu = grep("x",vars)
uu
uu = grep(vars,"x")
uu
uu = gsub(vars,"x")
?gsub
for(i in 1:100){
assign(paste("x", i, sep = ""), i)
}
for(i in 1:1){
facc = paste("f",i,sep="")
for(i in 1:100){
xx= assign(paste("x", i, sep = ""), i)
}
uu = gsub("1","start(1)*",xx)
#uu = gsub("0","0*",uu)
uu2 = paste(uu,lll[[1]],sep="")
#ooo[[i]] =  paste0(uu2,collapse="+")
}
for(i in 1:1){
facc = paste("f",i,sep="")
for(i in 1:100){
xx= assign(paste("x", i, sep = ""), i)
}
uu = gsub("1","start(1)*",xx)
#uu = gsub("0","0*",uu)
#uu2 = paste(uu,lll[[1]],sep="")
#ooo[[i]] =  paste0(uu2,collapse="+")
}
uu
xx = list()
for(i in 1:100){
xx[i] = assign(paste("x", i, sep = ""), i)
}
xx
xx = list()
for(i in 1:100){
xx[i] = paste("x", i, sep = "")
}
xx
uu = list()
for(i in 1:length(xx)){
uu = paste("0[*]",xx[i],sep="")
}
uu
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
uu
paste(uu,collapse="+")
f1 = paste(uu,collapse="+")
paste(paste("f2"," ~ "), f1)
reg.list = paste(uu,collapse="+")
paste(paste("f1"," ~ "), reg.list)
paste(paste("f3"," ~ "), reg.list)
paste(paste("f3"," ~ "), reg.list)
f1.reg = paste(paste("f1"," ~ "), reg.list)
f2.reg = paste(paste("f3"," ~ "), reg.list)
f3.reg = paste(paste("f3"," ~ "), reg.list)
paste(f1.reg,f2.reg,sep="/n")
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
mod = " "
for(i in 1:length(sim.list)){
mod = paste(mod,sim.list[[i]],sep="\n")
}
mod
?simulateData
dat <- simulateData(pop.mod,sample.nobs=500,fixed.x=TRUE)
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=500,fixed.x=TRUE)
pop.mod
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=500,fixed.x=TRUE)
reg.list2 = paste(xx,collapse="+")
reg.list2
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.list = list()
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
lav.out = lavaan::sem(lav.mod,dat)
lav.out = lavaan::sem(lav.mod,dat,meanstructure=TRUE)
extractMatrices(lav.out)$A
extractMatrices(lav.out)$A
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:156),type="ridge",
max.try=100,gradFun="none")
reg.out = multi_optim(lav.out,lambda=0,pars_pen=c(7:156),type="ridge",
max.try=100,gradFun="none")
summary(reg.out)
fitmeasures(lav.out)
summary(lav.out)
reg.out$fit
reg.out$out
reg.out
fitted(lav.out)
lav.out = lavaan::sem(lav.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
fitmeasures(lav.out)
reg.out = multi_optim(lav.out,lambda=0,pars_pen=c(7:156),type="ridge",
max.try=100,gradFun="none")
xx = list()
for(i in 1:200){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=500,fixed.x=TRUE)
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
lav.out = lavaan::sem(lav.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
xx = list()
for(i in 1:200){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=500,fixed.x=TRUE)
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
sim.list[[5]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f2 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f3 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=500,fixed.x=TRUE)
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.list[[5]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f2 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f3 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
lav.out = lavaan::sem(lav.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
xx = list()
for(i in 1:99){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
sim.list[[5]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f2 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f3 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=100,fixed.x=TRUE)
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.list[[5]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f2 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f3 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
lav.out = lavaan::sem(lav.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
summary(lav.out)
xx = list()
for(i in 1:200){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
reg.list
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
sim.list[[5]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f2 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f3 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
sim.list
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
pop.mod
dat <- simulateData(pop.mod,sample.nobs=100,fixed.x=TRUE)
xx
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.list[[5]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f2 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f3 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
run.mod
lav.out = lavaan::sem(lav.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
summary(lav.out)
lav.out = lavaan::sem(run.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
extractMatrices(lav.out)$A
extractMatrices(lav.out)$A
xx = list()
for(i in 1:120){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[2]] = paste(paste("f2"," ~ "), reg.list)
sim.list[[3]] = paste(paste("f3"," ~ "), reg.list)
sim.list[[4]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;"
sim.list[[5]] = "
f1 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f2 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
f3 ~ 1*x1000 + 1*x1001 + 1*x1002 + 1*x1003 + 1*x1004 + 1*x1005
"
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=80,fixed.x=TRUE)
reg.list2 = paste(xx,collapse="+")
run.list = list()
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.list[[5]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f2 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f3 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
lav.out = lavaan::sem(run.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
extractMatrices(lav.out)$A[c("f1","f2","f3"),]
run.list[[1]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[2]] = paste(paste("f2"," ~ "), reg.list2)
run.list[[3]] = paste(paste("f3"," ~ "), reg.list2)
run.list[[4]] = "
f1 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f2 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
f3 ~ x1000 + x1001 + x1002 + x1003 + x1004 + x1005
"
run.list[[5]] = "f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;"
run.mod = " "
for(i in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[i]],sep="\n")
}
lav.out = lavaan::sem(run.mod,dat,meanstructure=TRUE,fixed.x=TRUE)
extractMatrices(lav.out)$A
extractMatrices(lav.out)$A[c("f1","f2","f3"),]
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(1:378),type="ridge",
max.try=100,gradFun="none")
reg.out = regsem(lav.out,lambda=0.05,pars_pen=c(1:378),type="lasso",gradFun="ram")
warnings()
reg.out = multi_optim(lav.out,lambda=0.05,pars_pen=c(1:378),type="ridge",
max.try=100,gradFun="ram")
reg.out = multi_optim(lav.out,lambda=0.3,pars_pen=c(1:378),type="lasso",
max.try=100,gradFun="ram")
reg.out = multi_optim(lav.out,lambda=0.3,pars_pen=c(1:378),type="lasso",
max.try=100,gradFun="ram")
