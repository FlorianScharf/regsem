dv
ncat(dv)
str(dv)
class(dv)
sum(unique(dv))
is.numeric(dv)
if(is.numeric(dv)){
dv.class="gaussian"
}else if(is.integer(dv)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = glmnet::cv.glmnet(mediators,dv,alpha=1,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(as.matrix(data[,1:56]), as.matrix(data$dv), alpha=1,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
b.coefs[which(b.coefs!=0)]
b.cv.lasso = cv.glmnet(mediators,dv,alpha=1,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(as.matrix(data[,1:56]), as.matrix(data$dv), alpha=1,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
b.coefs[which(b.coefs!=0)]
library(glmnet) # remove
#b's
b.cv.lasso = cv.glmnet(mediators,dv,alpha=1,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(as.matrix(data[,1:56]), as.matrix(data$dv), alpha=1,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
b.coefs[which(b.coefs!=0)]
b.fit.lasso = glmnet(mediators, dv, alpha=1,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
b.coefs[which(b.coefs!=0)]
b.coefs
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators))
for(i in 1:ncol(mediators)){
if(is.numeric(mediators[,i])){
med.class="gaussian"
}else if(is.integer(mediators[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv)), mediators[i],
alpha=1, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv)), mediators[,i],
alpha=1, family=med.class,intercept=F,penalty.factor=c(0,1))
print(i)
}
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators))
for(i in 1:ncol(mediators)){
if(is.numeric(mediators[,i])){
med.class="gaussian"
}else if(is.integer(mediators[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv)), mediators[,i],
alpha=1, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv)), mediators[,i],
alpha=1, family=med.class,intercept=F,penalty.factor=c(0,1))
print(i)
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = names(mediators)
a.coefs
a.coefs * b.coefs
xmed_cat <- function(data,iv,mediators,dv){
library(glmnet) # remove
res <- list()
data <- Data
iv <- as.matrix(Data[,iv])
mediators <- as.matrix(data[,mediators])
dv <- as.matrix(data[,"Enroll"])
if(sum(is.na(iv)) > 0 |
sum(is.na(mediators)) > 0 |
sum(is.na(dv)) > 0){
stop("Missing values are not allowed")
}
if(is.numeric(dv)){
dv.class="gaussian"
}else if(is.integer(dv)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = cv.glmnet(mediators,dv,alpha=1,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(mediators, dv, alpha=1,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
res$b.coefs <- b.coefs
# a
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators))
for(i in 1:ncol(mediators)){
if(is.numeric(mediators[,i])){
med.class="gaussian"
}else if(is.integer(mediators[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv)), mediators[,i],
alpha=1, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv)), mediators[,i],
alpha=1, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = names(mediators)
res$a.coefs <- a.coefs
# indirect
res$indirect = a.coefs * b.coefs
# add class for summary function
# return list
res
}
xmed_cat(data,iv,mediators,dv)
head(data)
head(iv)
head(dv)
head(mediators)
iv <- "Accept"
dv <- "Enroll"
mediators <- c("Outstate","Room.Board","Books","Personal","S.F.Ratio","Expend")
xmed_cat <- function(data,iv,mediators,dv,type="lasso"){
library(glmnet) # remove
res <- list()
data <- Data
if(type=="lasso"){
alpha=1
}else if(type=="ridge"){
alpha=0
}else if(type=="enet"){
alpha=0.5
}
iv.mat <- as.matrix(Data[,iv])
mediators.mat <- as.matrix(data[,mediators])
dv.mat <- as.matrix(data[,dv])
if(sum(is.na(iv.mat)) > 0 |
sum(is.na(mediators.mat)) > 0 |
sum(is.na(dv.mat)) > 0){
stop("Missing values are not allowed")
}
if(is.numeric(dv.mat)){
dv.class="gaussian"
}else if(is.integer(dv.mat)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = cv.glmnet(mediators.mat,dv.mat,alpha=alpha,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(mediators.mat, dv.mat, alpha=alpha,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
res$b.coefs <- b.coefs
# a
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators.mat))
for(i in 1:ncol(mediators.mat)){
if(is.numeric(mediators.mat[,i])){
med.class="gaussian"
}else if(is.integer(mediators.mat[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = mediators
res$a.coefs <- a.coefs
# indirect
res$indirect = a.coefs * b.coefs
# add class for summary function
# return list
res
}
xmed_cat(data,iv,mediators,dv)
a.coefs
b.coefs
library(glmnet) # remove
res <- list()
data <- Data
if(type=="lasso"){
alpha=1
}else if(type=="ridge"){
alpha=0
}else if(type=="enet"){
alpha=0.5
}
iv.mat <- as.matrix(Data[,iv])
mediators.mat <- as.matrix(data[,mediators])
dv.mat <- as.matrix(data[,dv])
if(sum(is.na(iv.mat)) > 0 |
sum(is.na(mediators.mat)) > 0 |
sum(is.na(dv.mat)) > 0){
stop("Missing values are not allowed")
}
type="lasso"
library(glmnet) # remove
res <- list()
data <- Data
if(type=="lasso"){
alpha=1
}else if(type=="ridge"){
alpha=0
}else if(type=="enet"){
alpha=0.5
}
iv.mat <- as.matrix(Data[,iv])
mediators.mat <- as.matrix(data[,mediators])
dv.mat <- as.matrix(data[,dv])
if(sum(is.na(iv.mat)) > 0 |
sum(is.na(mediators.mat)) > 0 |
sum(is.na(dv.mat)) > 0){
stop("Missing values are not allowed")
}
if(is.numeric(dv.mat)){
dv.class="gaussian"
}else if(is.integer(dv.mat)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = cv.glmnet(mediators.mat,dv.mat,alpha=alpha,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(mediators.mat, dv.mat, alpha=alpha,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
b.coefs = b.coefs[-length(b.coefs)]
res$b.coefs <- b.coefs
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators.mat))
for(i in 1:ncol(mediators.mat)){
if(is.numeric(mediators.mat[,i])){
med.class="gaussian"
}else if(is.integer(mediators.mat[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.cv.lasso
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
a.coefs
names(a.coefs) = mediators
mediators
b.coefs
b.coefs
coef(b.fit.lasso, s=b.cv.lasso$lambda.min)
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
#b.coefs = b.coefs[-length(b.coefs)]
res$b.coefs <- b.coefs
b.coefs
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators.mat))
for(i in 1:ncol(mediators.mat)){
if(is.numeric(mediators.mat[,i])){
med.class="gaussian"
}else if(is.integer(mediators.mat[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = mediators
res$a.coefs <- a.coefs
a.coefs
xmed_cat <- function(data,iv,mediators,dv,type="lasso"){
library(glmnet) # remove
res <- list()
data <- Data
if(type=="lasso"){
alpha=1
}else if(type=="ridge"){
alpha=0
}else if(type=="enet"){
alpha=0.5
}
iv.mat <- as.matrix(Data[,iv])
mediators.mat <- as.matrix(data[,mediators])
dv.mat <- as.matrix(data[,dv])
if(sum(is.na(iv.mat)) > 0 |
sum(is.na(mediators.mat)) > 0 |
sum(is.na(dv.mat)) > 0){
stop("Missing values are not allowed")
}
if(is.numeric(dv.mat)){
dv.class="gaussian"
}else if(is.integer(dv.mat)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = cv.glmnet(mediators.mat,dv.mat,alpha=alpha,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(mediators.mat, dv.mat, alpha=alpha,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
#b.coefs = b.coefs[-length(b.coefs)]  ??????? Why -- Need to include?
res$b.coefs <- b.coefs
# a
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators.mat))
for(i in 1:ncol(mediators.mat)){
if(is.numeric(mediators.mat[,i])){
med.class="gaussian"
}else if(is.integer(mediators.mat[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = mediators
res$a.coefs <- a.coefs
# indirect
res$indirect = a.coefs * b.coefs
# add class for summary function
# return list
res
}
xmed_cat(data,iv,mediators,dv)
xmed_cat <- function(data,iv,mediators,dv,type="lasso"){
library(glmnet) # remove
res <- list()
data <- Data
if(type=="lasso"){
alpha=1
}else if(type=="ridge"){
alpha=0
}else if(type=="enet"){
alpha=0.5
}
iv.mat <- as.matrix(Data[,iv])
mediators.mat <- as.matrix(data[,mediators])
dv.mat <- as.matrix(data[,dv])
if(sum(is.na(iv.mat)) > 0 |
sum(is.na(mediators.mat)) > 0 |
sum(is.na(dv.mat)) > 0){
stop("Missing values are not allowed")
}
if(is.numeric(dv.mat)){
dv.class="gaussian"
}else if(is.integer(dv.mat)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = cv.glmnet(mediators.mat,dv.mat,alpha=alpha,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(mediators.mat, dv.mat, alpha=alpha,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
#b.coefs = b.coefs[-length(b.coefs)]  ??????? Why -- Need to include?
res$b.coefs <- round(b.coefs,3)
# a
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators.mat))
for(i in 1:ncol(mediators.mat)){
if(is.numeric(mediators.mat[,i])){
med.class="gaussian"
}else if(is.integer(mediators.mat[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = mediators
res$a.coefs <- round(a.coefs,3)
# indirect
res$indirect = round(a.coefs * b.coefs,3)
# add class for summary function
# return list
res
}
xmed_cat(data,iv,mediators,dv)
xmed_cat <- function(data,iv,mediators,dv,type="lasso"){
library(glmnet) # remove
res <- list()
data <- Data
if(type=="lasso"){
alpha=1
}else if(type=="ridge"){
alpha=0
}else if(type=="enet"){
alpha=0.5
}
iv.mat <- as.matrix(Data[,iv])
mediators.mat <- as.matrix(data[,mediators])
dv.mat <- as.matrix(data[,dv])
if(sum(is.na(iv.mat)) > 0 |
sum(is.na(mediators.mat)) > 0 |
sum(is.na(dv.mat)) > 0){
stop("Missing values are not allowed")
}
if(is.numeric(dv.mat)){
dv.class="gaussian"
}else if(is.integer(dv.mat)){
dv.class = "gaussian"
}else{
dv.class == "binomial"
}
#b's
b.cv.lasso = cv.glmnet(mediators.mat,dv.mat,alpha=alpha,family=dv.class,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.fit.lasso = glmnet(mediators.mat, dv.mat, alpha=alpha,
penalty.factor=c(rep(1,ncol(data)-2),0))
b.coefs = coef(b.fit.lasso, s=b.cv.lasso$lambda.min)[-1,1]
#b.coefs = b.coefs[-length(b.coefs)]  ??????? Why -- Need to include?
res$b.coefs <- round(b.coefs,3)
# a
a.cv.lasso = a.fit.lasso = vector("list",ncol(mediators.mat))
for(i in 1:ncol(mediators.mat)){
if(is.numeric(mediators.mat[,i])){
med.class="gaussian"
}else if(is.integer(mediators.mat[,i])){
med.class = "gaussian"
}else{
med.class == "binomial"
}
a.cv.lasso[[i]] = cv.glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
a.fit.lasso[[i]] = glmnet(as.matrix(cbind(rnorm(nrow(data),1,0.0001),iv.mat)), mediators.mat[,i],
alpha=alpha, family=med.class,intercept=F,penalty.factor=c(0,1))
}
a.coefs = numeric(length(b.coefs))
for(i in 1:length(a.coefs)){
if(!is.null(a.cv.lasso[[i]])){
a.coefs[i] = coef(a.fit.lasso[[i]], s=a.cv.lasso[[i]]$lambda.min)[-1,1][2]
}
}
names(a.coefs) = mediators
res$a.coefs <- round(a.coefs,3)
# indirect
res$indirect = round(a.coefs * b.coefs,3)
res$important <- names(res$indirect[res$indirect != 0])
# add class for summary function
# return list
res
}
xmed_cat(data,iv,mediators,dv)
100/14
