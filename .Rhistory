system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",alpha.inc=TRUE,
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",alpha.inc=FALSE,
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=TRUE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="rsolnp",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="GA",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",line.search=TRUE,
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
cv.out
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="enet",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="numDeriv",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="numDeriv",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="numDeriv",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="FALSE",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="lasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
library(regsem)
library(regsem)
xx = list()
for(i in 1:70){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3 + 0.8*y4 + 0.5*y5 + 1.5*y6
"
sim.list[[2]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[3]] = "
f1 ~ 0.2*x71 + 0.2*x72 + 0.2*x73 + 0.2*x74 + 0.2*x75 + 0.2*x76 + 0.2*x77 + 0.2*x78 + 0.2*x79 + 0.2*x80
"
sim.list[[4]] = "
f1 ~ 0.5*x81 + 0.5*x82 + 0.5*x83 + 0.5*x84 + 0.5*x85 + 0.5*x86 + 0.5*x87 + 0.5*x88 + 0.5*x89 + 0.5*x90
"
sim.list[[5]] = "
f1 ~ 1*x91 + 1*x92 + 1*x93 + 1*x94 + 1*x95 + 1*x96 + 1*x97 + 1*x98 + 1*x99 + 1*x100
"
xxx = list()
for(i in 1:100){
xxx[i] = paste("x", i, sep = "")
}
#### create collinearity
#val = val # won't go above 0.5
uuu = list()
for(i in 1:(length(xxx)-1)){
uuu[i] = paste(xxx[i],"~~val*",xxx[i+1],sep="")
}
sim.list[[6]] = paste(uuu,collapse=";")
jjj = list()
for(i in 1:(length(xxx))){
jjj[i] = paste(xxx[i],"~~1*",xxx[i],sep="")
}
sim.list[[7]] = paste(jjj,collapse=";")
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
pop.mod2 = gsub("val",0,pop.mod)
reg.list2 = paste(xxx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod2,sample.nobs=200,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#summary(lav.out)
mat <- extractMatrices(lav.out)["A"]
# options(max.print=10000000)
system.time(enet.sim <- cv_regsem(lav.out,n.lambda=40,jump=.01,tol=1e-4,type="lasso",
pars_pen=c(6:105),max.iter=400,multi.iter=3,quasi=TRUE,line.search=TRUE,
fit.ret=c("BIC","rmsea","AIC","CAIC","EBIC.5","EBIC.25"),
fit.ret2="train",mult.start=TRUE))
plot(enet.sim)
enet.sim
enet.sim$parameters[40,]
system.time(enet.sim <- cv_regsem(lav.out,n.lambda=40,jump=.02,tol=1e-4,type="enet",
pars_pen=c(6:105),max.iter=400,multi.iter=3,quasi=TRUE,line.search=TRUE,
fit.ret=c("BIC","rmsea","AIC","CAIC","EBIC.5","EBIC.25"),
fit.ret2="train",mult.start=TRUE))
enet.sim
plot(enet.sim)
# specify population model
population.model <- ' f1 =~ x1 + 0.8*x2 + 1.2*x3
f2 =~ x4 + 0.5*x5 + 1.5*x6
f3 =~ x7 + 0.1*x8 + 0.9*x9
f3 ~ 0.5*f1 + 0.6*f2
'
# generate data
set.seed(1234)
myData <- simulateData(population.model, sample.nobs=100L)
?cv_regsem
library(regsem)
?cv_regsem
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
nobs=200
iv <- rbinom(nobs,1,0.5)
med1 <- 0.5*iv + rnorm(nobs)
med2 <- 0.2*iv + rnorm(nobs)
med3 <- 0*iv + rnorm(nobs)
med1 <- as.numeric(scale(med1));med2 <- as.numeric(scale(med2));med3 <- as.numeric(scale(med3))
h1 <- 1*med1 + rnorm(nobs);h2 <- 1*med1 + rnorm(nobs);h3 <- 1*med1 + rnorm(nobs);
g1 <- 1*med2 + rnorm(nobs);g2 <- 1*med2 + rnorm(nobs);g3 <- 1*med2 + rnorm(nobs);
k1 <- 1*med3 + rnorm(nobs);k2 <- 1*med3 + rnorm(nobs);k3 <- 1*med3 + rnorm(nobs);
dv <- 0.5*med1 + 0.2*med2 + 0*med3 + 0.5*iv + rnorm(nobs)
dat <- cbind(iv,h1,h2,h3,g1,g2,g3,k1,k2,k3,med1,med2,med3,dv)
#dat[,2:14] <- scale(dat[,2:14])
write.csv(dat,file="C:/Users/rjacobuc/Dropbox/Search_2017/rj_talks/med.csv")
lav.mod <-"
med1 =~ h1 + h2 + h3
med2 =~ g1 + g2 + g3
med3 =~ k1 + k2 + k3
#med1~~1*med1;med2~~1*med2;med3~~1*med3
med1 ~ iv
med2 ~ iv
med3 ~ iv
dv ~ med1 + med2 + med3 + iv
"
lav.out <- sem(lav.mod,dat)
summary(lav.out)
extractMatrices(lav.out)["A"]
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.1,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=FALSE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
warnings()
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.05,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=FALSE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.05,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=30,jump=0.01,step=.1,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
cv.out
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.1,warm.start=FALSE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.5,warm.start=FALSE))
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.5,warm.start=TRUE))
plot(cv.out)
cv.out
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),tol=1e-7,
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.5,warm.start=TRUE))
plot(cv.out)
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),tol=1e-7,
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.5,warm.start=TRUE))
plot(cv.out3)
plot(cv.out)
cv.out
library(regsem)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),tol=1e-7,
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.5,warm.start=TRUE))
plot(cv.out)
system.time(cv.out <- cv_regsem(lav.out,type="alasso",pars_pen=c(7:9,10:12),tol=1e-3,
optMethod="coord_desc",line.search=TRUE,
solver=FALSE,gradFun="ram",quasi=TRUE,hessFun="none",
n.lambda=25,jump=0.01,step=.5,warm.start=TRUE))
plot(cv.out)
sim.func <- function(vec){
library(regsem)
xx = list()
for(i in 1:70){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 1.2*y3 + 0.8*y4 + 0.5*y5 + 1.5*y6
"
sim.list[[2]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[3]] = "
f1 ~ 0.2*x71 + 0.2*x72 + 0.2*x73 + 0.2*x74 + 0.2*x75 + 0.2*x76 + 0.2*x77 + 0.2*x78 + 0.2*x79 + 0.2*x80
"
sim.list[[4]] = "
f1 ~ 0.5*x81 + 0.5*x82 + 0.5*x83 + 0.5*x84 + 0.5*x85 + 0.5*x86 + 0.5*x87 + 0.5*x88 + 0.5*x89 + 0.5*x90
"
sim.list[[5]] = "
f1 ~ 1*x91 + 1*x92 + 1*x93 + 1*x94 + 1*x95 + 1*x96 + 1*x97 + 1*x98 + 1*x99 + 1*x100
"
xxx = list()
for(i in 1:100){
xxx[i] = paste("x", i, sep = "")
}
#### create collinearity
#val = val # won't go above 0.5
uuu = list()
for(i in 1:(length(xxx)-1)){
uuu[i] = paste(xxx[i],"~~val*",xxx[i+1],sep="")
}
sim.list[[6]] = paste(uuu,collapse=";")
jjj = list()
for(i in 1:(length(xxx))){
jjj[i] = paste(xxx[i],"~~1*",xxx[i],sep="")
}
sim.list[[7]] = paste(jjj,collapse=";")
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
pop.mod2 = gsub("val",vec["val"],pop.mod)
reg.list2 = paste(xxx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod2,sample.nobs=vec["samp"],seed=vec["seed"],model.type="lavaan")
print(nrow(dat))
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#summary(lav.out)
lav.pvalue = parameterestimates(lav.out)[2:113,"pvalue"]
lav.coef = coef(lav.out)
list(lav.pvalue,lav.coef,vec["samp"],vec["val"])
}
samp <- c(150)
val <- c(0)
iters <- 1:1
grid <- expand.grid(iters=iters,samp=samp,val=val)
grid$seed <- 1:nrow(grid)
sim.func(grid)
grid
samp <- c(150)
val <- c(0)
iters <- 1:3
grid <- expand.grid(iters=iters,samp=samp,val=val)
grid$seed <- 1:nrow(grid)
sim.func(grid[1,])
str(grid)
grid[1,]
grid[1,]["seed"]
grid[1,]$seed
grid <- as.matrix(grid)
sim.func(grid[1,])
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100)
summary(cv.out)
library(regsem)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100)
summary(cv.out)
library(MASS)
set.seed(1)
dat1 = mvrnorm(100,c(5,5),matrix(c(1,.5,.5,1),2,2))
cor(dat1)
plot(dat1)
?simulateData
population.model <- ' f1 =~ x1 + 0.8*x2 + 1.2*x3
f2 =~ x4 + 0.5*x5 + 1.5*x6
f3 =~ x7 + 0.1*x8 + 0.9*x9
'
# generate data
set.seed(1234)
myData <- simulateData(population.model, sample.nobs=1000)
pmodel <- ' f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 +x6
f3 =~ x7 + x8 + x9
'
outtt <- cfa(pmodel,myData)
summary(outtt)
population.model <- ' f1 =~ x1 + 0.8*x2 + 1.2*x3
f2 =~ x4 + 0.5*x5 + 1.5*x6
f3 =~ x7 + 0.1*x8 + 0.9*x9
f1 ~ y1 + y2 + y3
'
# generate data
set.seed(1234)
myData <- simulateData(population.model, sample.nobs=1000)
population.model <- ' f1 =~ x1 + 0.8*x2 + 1.2*x3
f2 =~ x4 + 0.5*x5 + 1.5*x6
f3 =~ x7 + 0.1*x8 + 0.9*x9
f1 ~ 0.8*y1 + 0.8*y2 + 0.8*y3
'
# generate data
set.seed(1234)
myData <- simulateData(population.model, sample.nobs=1000)
pmodel <- ' f1 =~ x1 + x2 + x3
f2 =~ x4 + x5 +x6
f3 =~ x7 + x8 + x9
f1 ~ y1 + y2 + y3
'
outtt <- cfa(pmodel,myData)
summary(outtt)
