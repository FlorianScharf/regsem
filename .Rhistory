lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ 0.1*lX1; dX2 ~ 0.1*lX2; dX3 ~ 0.2*lX3;dX4 ~ 0.2*lX4;dX5 ~ 0.2*lX5;
#residuals equal
X1 ~~ 1*X1; X2 ~~ 1*X2; X3 ~~ 1*X3; X4 ~~ 1*X4;X5 ~~ 1*X5;X6 ~~ 1*X6;
"
set.seed(i)
dat <- simulateData(sim.mod,model.type="lavaan",sample.nobs=1000)
lds_inv <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.inv <- lavaan(lds_inv, data=dat)
pars.inv[i, ] <- coef(fit.inv)
################ run model ###############3
lds_1 <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta1*lX1; dX2 ~ beta2*lX2; dX3 ~ beta3*lX3;dX4 ~ beta4*lX4;dX5 ~ beta5*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
pars.free[i, ] <- coef(fit.lds)
}
sim.pars <- c(1,1, 0.5, 0.5,.1,.1,.1,.2,.2,.2,1,1,1,1,1)
100*((colSums(pars.free - sim.pars)/sim.pars)/110)
pars.free
sim.pars <- c(1,1, 0.5, 0.5,.1,.1,.1,.2,.2,.2,1,1,1,1,1,1)
100*((colSums(pars.free - sim.pars)/sim.pars)/110)
100*((colSums(pars.inv - sim.pars)/sim.pars)/110)
100*((colSums(pars.mat[is.na(ind)==FALSE,] - sim.pars)/sim.pars)/sum(is.na(ind)==FALSE))
sim.pars <- c(1,1, 0.5, 0.5,.1,.1,.1,.2,.2,.2,1)
100*((colSums(pars.mat[is.na(ind)==FALSE,] - sim.pars)/sim.pars)/sum(is.na(ind)==FALSE))
sqe.diff <- matrix(NA,length(sim.pars),103)
pars2 <- pars.mat[is.na(ind)==FALSE,]
pars2 <- pars.mat[is.na(ind)==FALSE,]
sqe.diff <- matrix(NA,length(sim.pars),103)
for(i in 1:103){
sqe.diff[,i] <- (pars2[i,] -sim.pars) * (pars2[i,] - sim.pars)
}
rmse.reg <- round(sqrt(rowMeans(sqe.diff)),3)
rmse.reg
sim.pars <- c(1,1, 0.5, 0.5,.1,.1,.1,.2,.2,.2,1,1,1,1,1,1)
sqe.diff2 <- matrix(NA,length(sim.pars),110)
for(i in 1:110){
sqe.diff2[,i] <- (pars.free[i,] -sim.pars) * (pars.free[i,] - sim.pars)
}
rmse.free <- round(sqrt(rowMeans(sqe.diff2)),3)
rmse.free
sqe.diff2 <- matrix(NA,length(sim.pars),110)
for(i in 1:110){
sqe.diff2[,i] <- (pars.free[i,] -sim.pars) * t(pars.free[i,] - sim.pars)
}
rmse.free <- round(sqrt(rowMeans(sqe.diff2)),3)
rmse.free
colMeans(pars.free)
for(i in 1:iters){
sim.mod <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1*1;
inV ~ 1*1;
#Latent variances and covariance
slope ~~ 0.5*slope;
inV ~~ 0.5*inV;
slope ~~ 0.1*inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ 0*lX1; dX2 ~ 0*lX2; dX3 ~ 0.2*lX3;dX4 ~ 0.2*lX4;dX5 ~ 0.2*lX5;
#residuals equal
X1 ~~ 1*X1; X2 ~~ 1*X2; X3 ~~ 1*X3; X4 ~~ 1*X4;X5 ~~ 1*X5;X6 ~~ 1*X6;
"
set.seed(i)
dat <- simulateData(sim.mod,model.type="lavaan",sample.nobs=1000)
lds_inv <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.inv <- lavaan(lds_inv, data=dat)
pars.inv[i, ] <- coef(fit.inv)
################ run model ###############3
lds_1 <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta1*lX1; dX2 ~ beta2*lX2; dX3 ~ beta3*lX3;dX4 ~ beta4*lX4;dX5 ~ beta5*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
pars.free[i, ] <- coef(fit.lds)
}
sim.pars <- c(1,1, 0.5, 0.5,.1,.1,.1,.2,.2,.2,1,1,1,1,1,1)
100*((colSums(pars.free - sim.pars)/sim.pars)/110)
sqe.diff2 <- matrix(NA,length(sim.pars),110)
for(i in 1:110){
sqe.diff2[,i] <- (pars.free[i,] -sim.pars) * (pars.free[i,] - sim.pars)
}
rmse.free <- round(sqrt(rowMeans(sqe.diff2)),3)
rmse.free
colMeans(pars.free)
100*((colSums(pars.inv - sim.pars)/sim.pars)/110)
sqe.diff3 <- matrix(NA,length(sim.pars),110)
for(i in 1:110){
sqe.diff3[,i] <- (pars.inv[i,] -sim.pars) * (pars.inv[i,] - sim.pars)
}
rmse.inv <- round(sqrt(rowMeans(sqe.diff3)),3)
rmse.inv
colMeans(pars.inv)
library(regsem)
sim.mod <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1*1;
inV ~ 1*1;
#Latent variances and covariance
slope ~~ 0.5*slope;
inV ~~ 0.5*inV;
slope ~~ 0.5*inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ 0*lX1; dX2 ~ 0*lX2; dX3 ~ 0.2*lX3;dX4 ~ 0.2*lX4;dX5 ~ 0.2*lX5;
#residuals equal
X1 ~~ 1*X1; X2 ~~ 1*X2; X3 ~~ 1*X3; X4 ~~ 1*X4;X5 ~~ 1*X5;X6 ~~ 1*X6;
"
set.seed(1)
dat <- simulateData(sim.mod,model.type="lavaan",sample.nobs=500)
############# model with equal pars ############
lds_inv <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.inv <- lavaan(lds_inv, data=dat)
summary(fit.inv)
lds_1 <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta1*lX1; dX2 ~ beta2*lX2; dX3 ~ beta3*lX3;dX4 ~ beta4*lX4;dX5 ~ beta5*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
summary(fit.lds)
out.cv <- cv_regsem(fit.lds,n.lambda=15,jump=.01,pars_pen=c(3:7),lambda.start=0,
type="lasso",step=.1,diff_par=0.23,mult.start=FALSE,fit.ret="chisq",metric="chisq",
optMethod="coord_desc",gradFun="ram",tol=1e-4,quasi=TRUE,warm.start=TRUE,hessFun="none")
out.cv
out.cv <- cv_regsem(fit.lds,n.lambda=15,jump=.1,pars_pen=c(3:7),lambda.start=0,
type="lasso",step=.1,diff_par=0.23,mult.start=FALSE,fit.ret="chisq",metric="chisq",
optMethod="coord_desc",gradFun="ram",tol=1e-4,quasi=TRUE,warm.start=TRUE,hessFun="none")
out.cv
library(regsem)
library(regsem)
iters <- 120
pars.mat <- matrix(NA,iters,11)
ind <- rep(NA,iters)
for(i in 1:iters){
sim.mod <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1*1;
inV ~ 1*1;
#Latent variances and covariance
slope ~~ 0.5*slope;
inV ~~ 0.5*inV;
slope ~~ 0.1*inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ 0*lX1; dX2 ~ 0*lX2; dX3 ~ 0.2*lX3;dX4 ~ 0.2*lX4;dX5 ~ 0.2*lX5;
#residuals equal
X1 ~~ 1*X1; X2 ~~ 1*X2; X3 ~~ 1*X3; X4 ~~ 1*X4;X5 ~~ 1*X5;X6 ~~ 1*X6;
"
set.seed(i)
dat <- simulateData(sim.mod,model.type="lavaan",sample.nobs=500)
lds_inv <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta*lX1; dX2 ~ beta*lX2; dX3 ~ beta*lX3;dX4 ~ beta*lX4;dX5 ~ beta*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.inv <- lavaan(lds_inv, data=dat)
################ run model ###############3
lds_1 <- "
#latent variables
lX1 =~ 1*X1
lX2 =~ 1*X2
lX3 =~ 1*X3
lX4 =~ 1*X4
lX5 =~ 1*X5
lX6 =~ 1*X6
#autoregressions
lX2 ~ 1*lX1; lX3 ~ 1*lX2; lX4 ~ 1*lX3; lX5 ~ 1*lX4; lX6 ~ 1*lX5
#change - delta; d
dX1 =~ 1*lX2; dX2 =~ 1*lX3; dX3 =~ 1*lX4; dX4 =~ 1*lX5; dX5 =~ 1*lX6
#intercept and slope
inV =~ 1*lX1;
slope =~ 1*dX1 + 1*dX2 + 1*dX3 + 1*dX4 + 1*dX5
#manifest means @0
X1 ~ 0*1; X2 ~0*1; X3 ~ 0*1; X4 ~ 0*1; X5 ~ 0*1; X6 ~ 0*1
#slope and intercept means
slope ~ 1;
inV ~ 1;
#Latent variances and covariance
slope ~~ slope;
inV ~~ inV;
slope ~~ inV;
#means and vars @0
lX1 ~ 0*1; lX2 ~0*1; lX3 ~ 0*1; lX4 ~ 0*1;lX5 ~ 0*1; lX6 ~ 0*1
dX1 ~ 0*1; dX2 ~0*1; dX3 ~ 0*1; dX4 ~0*1; dX5 ~ 0*1
lX1 ~~ 0*lX1; lX2 ~~ 0*lX2; lX3 ~~ 0*lX3; lX4 ~~ 0*lX4;lX5 ~~ 0*lX5; lX6 ~~ 0*lX6
dX1 ~~ 0*dX1; dX2 ~~ 0*dX2; dX3 ~~ 0*dX3; dX4 ~~ 0*dX4; dX5 ~~ 0*dX5
#auVo-proportions
dX1 ~ beta1*lX1; dX2 ~ beta2*lX2; dX3 ~ beta3*lX3;dX4 ~ beta4*lX4;dX5 ~ beta5*lX5;
#residuals equal
X1 ~~ resid*X1; X2 ~~ resid*X2; X3 ~~ resid*X3; X4 ~~ resid*X4;X5 ~~ resid*X5;X6 ~~ resid*X6;
"
fit.lds <- lavaan(lds_1, data=dat)
out.cv <- try(cv_regsem(fit.lds,n.lambda=15,jump=.001,pars_pen=c(3:7),lambda.start=0,fit.ret2="cv",
type="diff_lasso",step=.01,diff_par=coef(fit.inv)["beta"],mult.start=FALSE,fit.ret="chisq",metric="chisq",
optMethod="coord_desc",gradFun="ram",tol=1e-4,quasi=TRUE,warm.start=TRUE,hessFun="none"))
if(inherits(out.cv, "try-error")){
ind[i] <- NA
}else if(all(out.cv$fits[,"conv"] == 99)){
ind[i] <- NA
}else{
pars.mat[i,] <- out.cv$final_pars
ind[i] = which(out.cv$fits[,"chisq"] == min(out.cv$fits[,"chisq"],na.rm=TRUE))
}
print(i)
}
pars.mat
summary(pars.mat)
bias(pars.mat,sim.pars)
library(SimDesign)
bias(pars.mat,sim.pars)
sim.pars <- c(1,1, 0, 0,.2,0.2,0.2,.5,.5,.1,1)
bias(pars.mat,sim.pars)
?bias
complete.cases(pars.mat)
pars.mat2 <- pars.mat[complete.cases(pars.mat),}
library(SimDesign)
bias(pars.mat,sim.pars)
pars2 <- pars.mat[is.na(ind)==FALSE,]
sqe.diff <- matrix(NA,length(sim.pars),sum(is.na(ind)==FALSE))
for(i in 1:sum(is.na(ind)==FALSE)){
sqe.diff[,i] <- (pars2[i,] -sim.pars) * (pars2[i,] - sim.pars)
}
rmse.reg <- round(sqrt(rowMeans(sqe.diff)),3)
rmse.reg
pars.mat2 <- pars.mat[complete.cases(pars.mat),]
bias(pars.mat2,sim.pars)
pars.mat2
ind
100*bias(pars.mat2,sim.pars)
out.cv$final_pars
