rowNum <- which(A.parFree$rhs[i] == rownames(A))
A[rowNum,colNum] = i
}else if(A.parFree$op[i] == "~1"){
A[which(rownames(A)==A.parFree$lhs[i]),which(colnames(A) == "1")] = i
}else if(A.parFree$op[i] == "~"){
colNum <- which(A.parFree$rhs[i] == colnames(A))
rowNum <- which(A.parFree$lhs[i] == rownames(A))
A[rowNum,colNum] = i
}
}
}else{
A = A
}
# A of free parameters
A_fixed <- A > 10000
parA_fixed = A.parT[A.parT$free == 0,]
for(gg in 1:nrow(parA_fixed)){
coll = which(parA_fixed$lhs[gg] == colnames(A_fixed))
roww = which(parA_fixed$rhs[gg] == rownames(A_fixed))
A_fixed[roww,coll] = T
}
# A_est
A_est = A_init
if(nrow(A.pars) > 0){
for(i in 1:nrow(A.pars)){
if(A.pars$op[i] == "=~"){
colNum <- which(A.pars$lhs[i] == colnames(A_est))
rowNum <- which(A.pars$rhs[i] == rownames(A_est))
A_est[rowNum,colNum] = A.pars$est[i]
}else if(A.pars$op[i] == "~1"){
A_est[which(rownames(A_est)==A.pars$lhs[i]),which(colnames(A_est) == "1")] = A.pars$est[i]
}else if(A.pars$op[i] == "~"){
colNum <- which(A.pars$rhs[i] == colnames(A_est))
rowNum <- which(A.pars$lhs[i] == rownames(A_est))
A_est[rowNum,colNum] = A.pars$est[i]
}
}
}else{
A_est = A_est
}
# create F
F <- A_init[1:(nvar + ifelse(any(pars$op == "~1"),1,0)),]
varNames <- model@pta$vnames$ov.model[[1]]
f.names <- colnames(A)[1:(length(varNames) + ifelse(any(pars$op == "~1"),1,0))]
for(ii in 1:length(f.names)){
#Numm = which(colnames(F)[ii] == f.names[ii])
F[ii,ii] = 1
}
# create S
covars <- pars[pars$op == "~~",]
covarT <- parT[parT$op == "~~",]
S_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
colnames(S_init) <- colnames(A); rownames(S_init) <- rownames(A)
# S_est -- equality doesn't effect
S_est <- as.matrix(S_init)
for(jj in 1:nrow(covars)){
col1 = which(colnames(S_est) == covars$lhs[jj])
row1 = which(rownames(S_est) == covars$rhs[jj])
S_est[row1,col1] = covars$est[jj]
}
if(any(S_est[lower.tri(S_est)] != 0)){
S_est <- S_est + t(S_est) - diag(diag(S_est))
}
S_est[rownames(S_est) == "1",colnames(S_est) == "1"] <- 1
# S
S <- S_init
covarT.free <- covarT[covarT$free > 0, ]
# any equality?
if(any(duplicated(covarT.free$label[covarT.free$label != ""]) == T)){
labels = unique(covarT.free$label[covarT.free$label != ""])
equals = covarT.free$free[covarT.free$label == labels]
min.equal = min(equals)
max.equal = max(equals)
covarT.free$free[covarT.free$label == labels] <- min.equal
dec = max.equal - min.equal
covarT.free$free[covarT.free$label != labels] <- covarT.free$free[covarT.free$label != labels] - dec
}
for(jj in 1:nrow(covarT.free)){
col1 = which(colnames(S) == covarT.free$lhs[jj])
row1 = which(rownames(S) == covarT.free$rhs[jj])
S[row1,col1] = covarT.free$free[jj]
}
if(any(S[lower.tri(S)] != 0)){
S <- S + t(S) - diag(diag(S))
}
if(sum(S >0 ) > 0){
dec2 = max(A) - min(S[S != 0]) + 1
S[S != 0] = S[S != 0] + dec2
}else{
S = S
}
# S_fixed
#S_fixed <- S_init
S_fixed <- S_init > 10000
covarT.fixed <- covarT[covarT$free == 0, ]
if(nrow(covarT.fixed) > 0){
for(jj in 1:nrow(covarT.fixed)){
col1 = which(colnames(S_fixed) == covarT.fixed$lhs[jj])
row1 = which(rownames(S_fixed) == covarT.fixed$rhs[jj])
S_fixed[row1,col1] = TRUE
}
}
if(any(S_fixed - diag(S_fixed) == 0 )){
S_fixed = S_fixed + t(S_fixed) -diag(diag(S_fixed))
S_fixed = S_fixed == 1
}else{
S_fixed = S_fixed
}
S_fixed[rownames(S_est) == "1",colnames(S_est) == "1"] <- TRUE
pars <- rep(NA,max(max(A),max(S)))
for(tt in 1:max(max(A),max(S))){
if(any(A == tt)==TRUE){
pars[tt] = A_est[A==tt][1]
}
else if(any(S == tt)==TRUE){
pars[tt] = S_est[S==tt][1]
}
}
for(i in 1:length(pars)){
if(any(A == i)){
pos = which(A == i,arr.ind=T)
one = colnames(A)[pos[2]]
two = rownames(A)[pos[1]]
names(pars)[i] = paste(one,"->",two)
}else if(any(S==i)){
pos = which(S == i,arr.ind=T)
one = colnames(S)[pos[2]]
two = rownames(S)[pos[1]]
names(pars)[i] = paste(one,"~~",two)
}
}
# return Matrices
matrices$A <- A
matrices$A_est <- A_est
matrices$A_fixed <- A_fixed
matrices$S <- S
matrices$S_est <- S_est
matrices$S_fixed <- S_fixed
matrices$F <- F
matrices$parameters <- round(pars,3)
matrices
}
list <- extractMatrices(model)
A <- list$A
A_est <- list$A_est
A_fixed <- list$A_fixed
S <- list$S
S_est <- list$S_est
S_fixed <- list$S_fixed
F <- list$F
I <- diag(nrow(A))
if(is.null(pars_pen) == TRUE){
if(any(colnames(A) == "1")){
IntCol = which(colnames(A) == "1")
A_minusInt = A[,-IntCol]
A_pen = A_minusInt != 0
pars_pen = A_minusInt[A_pen]
}else{
A_pen = A != 0
pars_pen = A[A_pen]
}
}
# set fixed parameters
############## probably should be set after estimates are given as parameters fixed to
############## 1 will be thought to be start parameter 1
#A[A.fixed ==T] <- A.est[A.fixed==T]
#S[S.fixed ==T] <- S.est[S.fixed==T]
if(class(Start)=="numeric"){
start=Start
}else if(class(Start) != "numeric"){
if(Start=="lavaan"){
# get starting values
lambda.start = lavaan::inspect(model,"start")$lambda
psi.start = lavaan::inspect(model,"start")$psi  # tricky to get ordering
theta.start = diag(lavaan::inspect(model,"start")$theta) # only diagonal elements of theta
nu.start = lavaan::inspect(model,"start")$nu
alpha.start = lavaan::inspect(model,"start")$alpha
# put into vector
#par.start = as.vector(c(lambda.start[lambda.start != 0],psi.start[!upper.tri(psi.start)],theta.start),mode="numeric")
par.start = as.vector(c(lambda.start,theta.start,psi.start[!upper.tri(psi.start)]),mode="numeric")
# assign which values in parTable have a number assigned !=0 in free column
free <- lavaan::parTable(model)$free
# pull only free parameters
start = par.start[free > 0]
st <- is.na(start)
start <- start[!st]
} else if(Start == "default"){
nstart <- max(max(A),max(S))
start <- rep(0.5,nstart)
}
}else if(Start=="prev"){
nstart <- max(max(A),max(S))
start.seq <- seq(1:nstart)
start <- rep(0.5,nstart)
for(i in 1:nstart){
if(sum(A == i) > 0) {
start[i] = A.est[A == i]
}
else if(sum(S== i)>0){
start[i] = S.est[S==i][1]
}
}
}
mult = RAMmult(par=start,A,S,F,A_fixed,A_est,S_fixed,S_est)
pen_vec = c(mult$A_est22[A %in% pars_pen],mult$S_est22[S %in% pars_pen])
if(type=="diff_lasso"){
pen_diff = pen_vec - diff_par
}else{
pen_diff=0
}
mult$A_est22
fit = fiml_calc(ImpCov=mult$ImpCov,data=data,
Areg=mult$A_est22,lambda,alpha,type,pen_vec)
Areg=mult$A_est22
ImpCov=mult$ImpCov
m = dim(ImpCov)[1]
IntCol = which(colnames(Areg) == "1")
IntCol2 = colnames(data)
fit = 0
IntCol
colnames(Areg) == "1"
i=1
person1 = data[i,]
Areg
colnames(Areg[,1:m])
nvar
IntCol2 = colnames(Areg[,1:nvar])
person1 = data[i,IntCol2]
ind1 = is.na(person1)==FALSE
ind1
K = sum(ind1)
K
Areg[ind1,IntCol]
Areg[,IntCol]
Areg[colnames(person1[ind1]),IntCol]
colnames(person1[ind1])
ind1
Areg[,IntCol]
meanvec = Areg[,IntCol]
names(meanvec)
meanvec2 = meanvec[names(meanvec) == names(ind1)]
meanvec2
names(meanvec) == names(ind1)
names(ind1)
ind1
str(ind1)
meanvec2 = meanvec[names(meanvec) == IntCol2]
IntCol2
names(meanvec)
names(meanvec) == IntCol2
meanvec[IntCol2]
meanvec2 = meanvec[IntCol2][ind1]
sub1 = person1[ind1] - meanvec
meanvec[IntCol2][ind1]
sub1 = person1[ind1] - meanvec2
indFit = K - 0.5* log(det(ImpCov[ind1,ind1])) - 0.5* t(sub1) %*% solve(ImpCov[ind1,ind1]) %*% sub1
fit = fit + indFit
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
ImpCov
ind
ind1
meanvec[IntCol2]
Areg[,IntCol]
ImpCov
is.na(person1)==T
ind1 = which(is.na(person1)==T)
ind1
ind1 = names(is.na(person1)==T)
ind1
is.na(person1)==T
ind1 = which(is.na(person1)==T)
ind1 = is.na(person1)==T
colnames(data[,ind1])
ind1
is.na(person1)==T
colnames(data[,ind1==T])
ind1
ind1==T
ind1 = which(is.na(person1)==T)
colnames(data[,ind1])
ind1
names(data[,ind1])
data[,ind1]
colnames(data)[ind1]
misVar = colnames(data)[ind1]
ind1
unique(ind1)
meanvec = Areg[,IntCol]
meanvec
meanvec = Areg[-rownames(Areg)=="1",IntCol]
rownames(Areg)=="1"
meanvec = Areg[-(rownames(Areg)=="1"),IntCol]
meanvec
rownames(Areg)=="1"
Areg[(rownames(Areg)!="1"),IntCol]
misVar
names(meanvec)
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
names(meanvec)
meanvec[-misVar]
misVar
meanvec[misVar]
meanvec[-c(misVar)]
meanvec[misVar]
meanvec[!misVar]
meanvec[-misVar]
ind1
names(meanvec)
names(meanvec) == misVar
meanvec2 = meanvec[names(meanvec) != misVar]
meanvec2
person1
sub1 = c(person1[ind1],0) - meanvec2
c(person1[ind1],0)
person1[ind1]
sub1 = c(person1[-ind1],0) - meanvec2
sub1 = c(person1[!ind1],0) - meanvec2
sub1 = c(person1[is.na(person1)==F],0) - meanvec2
is.na(person1)==F
is.na(person1)==F
is.na(person1)
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
sub1
indFit = K - 0.5* log(det(ImpCov[ind1,ind1])) - 0.5* t(sub1) %*% solve(ImpCov[ind1,ind1]) %*% sub1
ImpCov1
ImpCov
indFit = K - 0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
indFit
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
indFit = K - 0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
fit = fit + indFit
}
-ind1
max(0,-ind1)
min(0,-ind1)
ind=c(1,2)
min(0,-ind1)
-ind
ind1
ind1=c(1,2)
min(0,-ind1)
ind1 = which(is.na(person1)==T)
ind1
ind1==0
is.logical(ind1)
str(ind1)
ind1
ind1 = which(is.na(person1)==T)
ind1
ind1==0
is.null(ind1)
ind1>0
is.na(person1)==T
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
if(sum(is.na(person1)==T) >0){
indFit = K - 0.5* log(det(ImpCov[-in1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-in1,-ind1]) %*% sub1
}else{
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
}
fit = fit + indFit
}
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
if(sum(is.na(person1)==T) >0){
indFit = K - 0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
}else{
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
}
fit = fit + indFit
}
ind1
sum(is.na(person1)==T) >0
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
sub1
meanvec
meanvec2
names(meanvec) != misVar
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
if(sum(is.na(person1)==T) >0){
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
indFit = K - 0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
}else{
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
sub1 = c(person1,0) - meanvec
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
}
fit = fit + indFit
}
c(person1,0)
cbind(person1,0)
sub1 = cbind(person1,0) - meanvec
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
if(sum(is.na(person1)==T) >0){
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
indFit = K - 0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
}else{
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
sub1 = cbind(person1,0) - meanvec
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
}
fit = fit + indFit
}
sub1
ImpCov
str(sub1)
sub1 = as.vector(cbind(person1,0) - meanvec)
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
as.vector(cbind(person1,0) - meanvec)
sub1 = as.vector(cbind(person1,0) - meanvec)
str(sub1)
t(sub1) %*% solve(ImpCov)
sub1 = as.numeric(cbind(person1,0) - meanvec)
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
if(sum(is.na(person1)==T) >0){
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
indFit = K - 0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
}else{
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
sub1 = as.numeric(cbind(person1,0) - meanvec)
indFit = K - 0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
}
fit = fit + indFit
}
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
warnings()
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
library(regsem)
library(regsem)
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
fit_indices(fit1)
fit1
fitMeasures(outt)
for(i in 1:nrow(data)){
person1 = data[i,IntCol2]
ind1 = which(is.na(person1)==T)
misVar = colnames(data)[ind1]
K = nvar - sum(unique(ind1))
if(sum(is.na(person1)==T) >0){
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
meanvec2 = meanvec[names(meanvec) != misVar]
sub1 = c(person1[is.na(person1)==FALSE],0) - meanvec2
indFit =  0.5* log(det(ImpCov[-ind1,-ind1])) - 0.5* t(sub1) %*% solve(ImpCov[-ind1,-ind1]) %*% sub1
}else{
meanvec = Areg[(rownames(Areg)!="1"),IntCol]
sub1 = as.numeric(cbind(person1,0) - meanvec)
indFit =  0.5* log(det(ImpCov)) - 0.5* t(sub1) %*% solve(ImpCov) %*% sub1
}
fit = fit + indFit
}
fit
-1 * fit
-1 * fit * 1/nrow(data)
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
fit1
library(regsem)
fit1 <- regsem(outt,type="none",optMethod="nlminb",
gradFun="none", data=HS,missing="fiml")
fit1
