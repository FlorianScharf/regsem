reg.out3
# note it requires smaller penalties than other applications
reg.out3 = cv_regsem(model = semFit2, pars_pen = "loadings",
mult.start = TRUE, multi.iter = 10,optMethod="coord_desc",
n.lambda = 20, type = "scad", jump = 10^-1, lambda.start = 0.001)
reg.out3
# note it requires smaller penalties than other applications
reg.out3 = cv_regsem(model = semFit2, pars_pen = "loadings",
mult.start = TRUE, multi.iter = 10,optMethod="coord_desc",
n.lambda = 20, type = "scad", jump = .05, lambda.start = 0.001)
reg.out3
# note it requires smaller penalties than other applications
reg.out3 = cv_regsem(model = semFit2, pars_pen = "loadings",
mult.start = TRUE, multi.iter = 10,optMethod="coord_desc",
n.lambda = 20, type = "scad", jump = .5, lambda.start = 0.001)
reg.out3
# note it requires smaller penalties than other applications
reg.out3 = cv_regsem(model = semFit2, pars_pen = "loadings",
mult.start = TRUE, multi.iter = 10,optMethod="coord_desc",
n.lambda = 20, type = "mcp", jump = .05, lambda.start = 0.001)
reg.out3
# note it requires smaller penalties than other applications
reg.out3 = cv_regsem(model = semFit2, pars_pen = "loadings",
mult.start = TRUE, multi.iter = 10,
n.lambda = 20, type = "lasso", jump = 10^-5, lambda.start = 0)
reg.out3
library(regsem)
library(regsem)
install.packages("roxygen2")
library(regsem)
library(regsem)
runif(0.5,1)
runif(1,0.05,1)
?runif
library(regsem)
library(regsem)
install.packages("roxygen2")
library(regsem)
?cv_regsem
library(regsem)
library(regsem)
vignette("overview",package="regsem")
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=20,jump=0.01)
library(regsem)
vignette("overview",package="regsem")
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=20,jump=0.01)
library(regsem)
vignette("overview",package="regsem")
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=20,jump=0.01)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
library(regsem)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
library(regsem)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
cv.out
library(regsem)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=20,jump=0.01)
cv.out
library(regsem)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=20,jump=0.01)
cv.out
library(regsem)
library(regsem)
library(regsem)
library(regsem)
?cv_regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
# increase to > 25
cv.out = cv_regsem(outt,type="lasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.05)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),random.alpha=1,
n.lambda=5,jump=0.05)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="lasso", pars_pen=c(1:2,6:8),random.alpha=1,
n.lambda=5,jump=0.05)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),random.alpha=.8,
n.lambda=5,jump=0.05)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),random.alpha=.5,
n.lambda=5,jump=0.05)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),random.alpha=.1,
n.lambda=5,jump=0.05)
cv.out
# increase to > 25
cv.out = cv_regsem(outt,type="rlasso", pars_pen=c(1:2,6:8),random.alpha=.1,
n.lambda=30,jump=0.01)
cv.out
plot(cv.out)
library(regsem)
library(regsem)
library(regsem)
?regsem
?regsem
library(regsem)
?regsem
library(lavaan)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
library(regsem)
?regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=9,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
fit1 <- regsem(outt, lambda=0.05, type="lasso",random.alpha=9,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
fit1 <- regsem(outt, lambda=0.05, type="rlasso",random.alpha=9,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
fit1 <- regsem(outt, lambda=0.05, type="rlasso",random.alpha=.2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
tt="rlasso"
tt=="rlasso2"
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
library(regsem)
library(regsem)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
library(regsem)
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
library(regsem)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=.1,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=.2,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
library(regsem)
fitt <- cv_regsem(outt, lambda=0.05,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=.5,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l1*x3 + l1*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l1"))
summary(fit1)
fit2 <- regsem(outt, lambda=10.0, type="lasso",
pars_pen=c("l1"))
summary(fit1)
summary(outt)
fit2 <- regsem(outt, lambda=0.02, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=0.03, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=.5, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=1, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l1"))
summary(fit2)
summary(outt)
summary(outt)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l11*x7 + l11*x8 + l11*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l11"))
summary(fit1)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l11"))
summary(fit2)
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l11*x7 + l11*x8 + l11*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l11"))
summary(fit1)
library(regsem)
summary(outt)
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l9*x7 + l9*x8 + l9*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l11"))
summary(fit1)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l9"))
summary(fit1)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l9"))
summary(fit2)
extractMatrices(outt)
"l1" == "l11"
model=outt
matrices <-  list()
#library(Matrix)
#library(lavaan)
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
#parT = parT[parT$exo != 1,]
#pars = pars[parT$exo != 1,]
nfac.hold1 <- pars[pars$op == "=~",]
nfac1 <- length(unique(nfac.hold1$lhs))
mean =FALSE
if(any(parT$op == "~1")){
parTT = parT[parT$op == "~1",]
if(any(parTT$free > 0)){
mean = TRUE
}
}
nfac2 = nfac1 + ifelse(mean==TRUE,1,0)
# check for groups
#model@pta$ngroups
nvar = model@pta$nvar[[1]][1]
A_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
#unique(nfac.hold1$lhs)
name <- unique(pars$lhs)
name.vars <- model@pta$vnames$ov[[1]]
name.factors <- model@pta$vnames$lv[[1]]
if(identical(name.factors, character(0))){
name.factors2=NA
}else{
name.factors2 = name.factors
}
if(length(name.factors)!=0){
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1",name.factors)
rownames(A_init) <- c(name.vars,"1",name.factors)
}else{
colnames(A_init) <- c(name.vars,name.factors)
rownames(A_init) <- c(name.vars,name.factors)
}
}else{
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1")
rownames(A_init) <- c(name.vars,"1")
}else{
colnames(A_init) <- c(name.vars)
rownames(A_init) <- c(name.vars)
}
}
A <- A_init
A.parT = parT[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.pars = pars[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.parFree <- A.parT[A.parT$free > 0,]
uniq <- unique(A.parFree[,"label"])
uniq
uniq2 <- uniq[table(A.parFree[,"label"]) == 1]
uniq2
table(A.parFree[,"label"]) == 1
A.parFree[,"label"])
A.parFree[,"label"]
pars.align.A = matrix(NA,length(A.parFree$free),2)
pars.align.A
A.parFree33 = A.parFree
if(length(uniq2)>0){
for(i in 1:length(uniq2)){
A.parFree[A.parFree[,"label"] == uniq2[i],"label"] <- ""
}
}
# any equality?
if(any(duplicated(A.parFree$label[A.parFree$label != ""]) == T)){
labels = unique(A.parFree$label[A.parFree$label != ""])
for(i in 1:length(labels)){
equals = A.parFree$free[A.parFree$label == labels[i]]
min.equal = min(equals)
max.equal = max(equals)
A.parFree$free[A.parFree$label == labels[i]] <- min.equal
#  dec = max.equal - min.equal
# A.parFree$free[A.parFree$label == labels[i]] <- A.parFree$free[A.parFree$label == labels[i]] - dec
}
#equals = A.parFree$free[A.parFree$label == labels]
}
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
A.parFree2
x="l9"
if (is.null(x)) {return(x)} else
if (is.numeric(x)) {return (x)}
else if (is.character(x)) {
labels <- parTable(model)$label
ids <- parTable(model)$free
matching.ids <- which(labels %in% x)
if (length(matching.ids)!=length(x)) {
stop("Have to specify parameter number in pars_pen for equality constrained labels")
}
return(ids[matching.ids])
} else {
warning("Unknown class type passed to parse_parameters().")
return(NULL)
}
if (is.null(x)) {return(x)} else
if (is.numeric(x)) {return (x)}
else if (is.character(x)) {
labels <- parTable(model)$label
ids <- parTable(model)$free
matching.ids <- which(labels %in% x)
if (length(matching.ids)!=length(x)) {
stop("Have to specify parameter number in pars_pen for equality constrained labels")
}
return(ids[matching.ids])
} else {
warning("Unknown class type passed to parse_parameters().")
return(NULL)
}
labels <- parTable(model)$label
ids <- parTable(model)$free
matching.ids <- which(labels %in% x)
matching.ids
if (length(matching.ids)!=length(x)) {
stop("Have to specify parameter number in pars_pen for equality constrained labels")
}
length(x)
extractMatrices(outt)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=6)
summary(fit2)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l9"))
summary(fit2)
mats = extractMatrices(model)
if(estimator=="ML"){
estimator2 = 1
}else if(estimator=="ULS"){
estimator2 = 2
}
#pars_pen2 <- parse_parameters(pars_pen,model)
ids = which(mats$pars.align[,2] %in% pars_pen)
pars_pen="l9"
#pars_pen2 <- parse_parameters(pars_pen,model)
ids = which(mats$pars.align[,2] %in% pars_pen)
ids
pars_pen2 = as.numeric(mats$pars.align[ids,1])
pars_pen2
ids
mats$pars.align
mats$pars.align[ids,1]
ids
mats$pars.align
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=6)
summary(fit2)
fit2 <- regsem(outt, lambda=1, type="lasso",
pars_pen=6)
summary(fit2)
ids
library(regsem)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l9"))
library(regsem)
