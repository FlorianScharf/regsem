plot(cv.out, show.minimum="BIC")
cv.out
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100)
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=100,optMethod="slsqp")
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8),
n.lambda=100,optMethod="coord_desc",prerun=FALSE)
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8),
n.lambda=100,optMethod="coord_desc",prerun=TRUE)
plot(cv.out)
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), tol=1e-8,
n.lambda=100,optMethod="coord_desc",prerun=FALSE)
plot(cv.out)
cv.out
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
xx = list()
for(i in 1:70){
xx[i] = paste("x", i, sep = "")
}
uu = list()
for(i in 1:length(xx)){
uu[i] = paste("0*",xx[i],sep="")
}
reg.list = paste(uu,collapse="+")
sim.list = list()
sim.list[[1]] = "f1 =~ y1 + 0.8*y2 + 0.8*y3 + 0.8*y4 + 0.5*y5 + 0.5*y6
"
sim.list[[2]] = paste(paste("f1"," ~ "), reg.list)
sim.list[[3]] = "
f1 ~ 0.2*x71 + 0.2*x72 + 0.2*x73 + 0.2*x74 + 0.2*x75 + 0.2*x76 + 0.2*x77 + 0.2*x78 + 0.2*x79 + 0.2*x80
"
sim.list[[4]] = "
f1 ~ 0.5*x81 + 0.5*x82 + 0.5*x83 + 0.5*x84 + 0.5*x85 + 0.5*x86 + 0.5*x87 + 0.5*x88 + 0.5*x89 + 0.5*x90
"
sim.list[[5]] = "
f1 ~ 0.8*x91 + 0.8*x92 + 0.8*x93 + 0.8*x94 + 0.8*x95 + 0.8*x96 + 0.8*x97 + 0.8*x98 + 0.8*x99 + 0.8*x100
"
xxx = list()
for(i in 1:100){
xxx[i] = paste("x", i, sep = "")
}
uuu = list()
for(i in 1:length(xxx)){
uuu[i] = paste(1,"*",xxx[i],sep="")
}
jjj = list()
for(i in 1:(length(xxx))){
jjj[i] = paste(xxx[i],"~~",1,"*",xxx[i],sep="")
}
sim.list[[7]] = paste(jjj,collapse=";")
val1 = 0.7
kkk = list()
count=0
for(i in 1:100){
for(j in 1:100){
if(i != j & j > i){
count = count+1
kkk[count] = paste(xxx[i],"~~",val1,"*",xxx[j],sep="")
}
}
}
sim.list[[8]] = paste(kkk,collapse=";")
pop.mod = " "
for(i in 1:length(sim.list)){
pop.mod = paste(pop.mod,sim.list[[i]],sep="\n")
}
reg.list2 = paste(xxx,collapse="+")
run.list = list()
run.list[[1]] = "f1 =~ NA*y1 + y2 + y3 + y4 + y5 + y6
"
run.list[[2]] = paste(paste("f1"," ~ "), reg.list2)
run.list[[3]] = "f1~~1*f1"
run.mod = " "
for(k in 1:length(run.list)){
run.mod = paste(run.mod,run.list[[k]],sep="\n")
}
dat <- simulateData(pop.mod,sample.nobs=150,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
dat <- simulateData(pop.mod,sample.nobs=100,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE),silent=TRUE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
?lavaan
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE),silent=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp",fit.ret2="boot",metric="ncp",
fit.ret=c("bic","rmsea","ncp"))
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
dat <- simulateData(pop.mod,sample.nobs=150,seed=1,model.type="lavaan")
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE),silent=TRUE)
lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions(do.fit=FALSE)),silent=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions(do.fit=FALSE))
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions("do.fit=FALSE"))
lavOptions("do.fit=FALSE")
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE)
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions=list("do.fit=FALSE"))
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions=list(do.fit=FALSE))
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,lavOptions("do.fit",FALSE))
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE)
#lav.out <- try(lavaan::sem(run.mod,dat2,fixed.x=FALSE),silent=TRUE)
summary(lav.out,fit=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="slsqp")
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
dat <- simulateData(pop.mod,sample.nobs=120,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=FALSE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=TRUE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.1,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.5,
pars_pen=c(7:106),optMethod="rsolnp")
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0.5,
pars_pen=c(7:106),optMethod="slsqp",warm.start = FALSE)
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0,
pars_pen=c(7:106),optMethod="rsolnp",warm.start = FALSE)
enet.sim
dat <- simulateData(pop.mod,sample.nobs=300,seed=1,model.type="lavaan")
dat2 <- dat
dat2[,7:106] <- scale(dat[,7:106])
lav.out <- lavaan::sem(run.mod,dat2,fixed.x=TRUE,do.fit=TRUE)
lav.out
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0,
fit.ret2="cv",fit.ret=c("BIC","ncp","rmsea"),metric="ncp",
pars_pen=c(7:106),optMethod="rsolnp",warm.start = FALSE)
enet.sim
enet.sim <- cv_regsem(lav.out,n.lambda=1,jump=.1,type="enet",alpha=0.5,lambda.start=0,
fit.ret2="boot",fit.ret=c("BIC","ncp","rmsea"),metric="ncp",
pars_pen=c(7:106),optMethod="rsolnp",warm.start = FALSE)
enet.sim
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(lavaan)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="alasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1
fit1 <- cv_regsem(outt, lambda=0.05, type="alasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
fit1 <- cv_regsem(outt, lambda=0.05, type="alasso",optMethod="slsqp",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
?cv_regsem
fit1 <- cv_regsem(outt, type="alasso",optMethod="slsqp",n.lambda=10,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="slsqp",n.lambda=10,jump=0.01,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="rsolnp",n.lambda=10,jump=0.01,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="rsolnp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="coord_desc",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1
fit1 <- cv_regsem(outt, type="lasso",optMethod="coord_desc",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="lasso",optMethod="rsolnp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
?nloptr
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
nloptr.print.options()
library(nloptr)
nloptr.print.options()
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
nloptr.print.options()
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
nloptr.print.options()
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1
library(regsem)
fit1 <- cv_regsem(outt, type="lasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
5*7*6
5*6
*5
30*6
5*6*7
5(7)
5*7
4500/35
?mclapply
library(multicore)
library(parallel)
?mclapply
4*6
24*5
*25
120*25
5*25
7*25
7*30
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- cv_regsem(outt, type="alasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="rsolnp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="coord_desc",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
fit1 <- cv_regsem(outt, type="alasso",optMethod="slsqp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
library(regsem)
fit1 <- cv_regsem(outt, type="alasso",optMethod="rsolnp",n.lambda=10,jump=0.02,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
#summary(fit1)
plot(fit1)
summary(fit1)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
?paste0
library(regsem)
summary(fit1)
library(regsem)
library(regsem)
summary(fit1)
library(regsem)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
paste0(" Final Parameters: ", c(0,1),"\n")
paste0(" Final Parameters: ", paste(0,1),"\n")
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
summary(fit1)
library(regsem)
fit1$final_pars
str(fit1$final_pars)
summary(fit1)
paste(fit1$final_pars,"\n")
paste(fit1$final_pars,",")
paste(fit1$final_pars)
paste(as.numeric(fit1$final_pars))
paste(0,1)
fit1$final_pars
?paste
paste(fit1$final_pars,"")
paste(fit1$final_pars," ")
paste(fit1$final_pars,fit1$final_pars)
paste(cat(fit1$final_pars))
cat(fit1$final_pars)
library(regsem)
summary(fit1)
paste(cat(fit1$final_pars))
cat("paste",cat(fit1$final_pars))
paste("paste",cat(fit1$final_pars))
?cat
?paste
paste("paste",fit1$final_pars,sep="")
paste(cat("paste",fit1$final_pars),sep="")
paste(c("paste",fit1$final_pars),sep="")
paste(cat("paste",fit1$final_pars),sep="")
?cat
paste(paste("paste",fit1$final_pars,sep=""),sep="")
paste("paste",paste(fit1$final_pars,sep=""),sep="")
paste(fit1$final_pars,sep="")
paste("paste",paste(fit1$final_pars,sep=" "),sep="")
paste(fit1$final_pars,sep=" ")
paste("paste",cat(fit1$final_pars,"\n"),sep="")
cat(fit1$final_pars,"\n")
paste("paste",cat(fit1$final_pars,""),sep="")
cat(fit1$final_pars,"")
paste("paste",cat(fit1$final_pars," "),sep="")
library(regsem)
?cv_regsem
fit1 <- cv_regsem(outt, type="alasso",optMethod="rsolnp",n.lambda=10,jump=0.02,mult.start=TRUE,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
fit1 <- cv_regsem(outt, type="alasso",optMethod="coord_desc",n.lambda=10,jump=0.02,mult.start=TRUE,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- cv_regsem(outt, type="alasso",optMethod="rsolnp",n.lambda=10,jump=0.02,mult.start=TRUE,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
setwd("C:/Users/RJacobucci/Documents/GitHub/mimic_regsem")
setwd("C:/Users/Ross/Documents/GitHub/mimic_regsem")
setwd("C:/Users/rjacobuc/Documents/GitHub/mimic_regsem")
library(lavaan)
library(qgraph)
library(semPlot)
library(psych)
library(regsem)
library(lmtest)
library(ggplot2)
library(reshape2)
library(semTools)
#Here one reads in the data - As I can't share it yet I created a dummy dataset with same means and covs.
#Parameter estimates are identical down to the third decimal so for now we can just use the dummy data (for final paper just rerun with the 'real' - only difference would be skewness and nonlinearities but those are negligible)
datacamcan<-read.csv('CamCAN_cogneuro_data_Ross2017-03-16.csv')  #Reads in real data
#datacamcan<-read.csv('schmamcandat2017-03-16.csv')
colnames(datacamcan)[2:49]<-print(paste('gm',1:48,sep=''))        #Unify grey matter labels for easier syntax
colnames(datacamcan)[50:97]<-print(paste('fa',1:48,sep=''))       #Unify grey matter labels for easier syntax
datacamcan$simpred1<-datacamcan$VSTMcolour_K_ss3+rnorm(708,.5,.5) #add dummy predictors for reference
datacamcan$simpred2<-datacamcan$VSTMcolour_K_ss3+rnorm(708,.5,.5) #add dummy predictors for reference
#Below the syntax to fit normal ML and regsem MIMIC models to predict a single LV (vstmlv) measured by three observables
#Syntax below is to use white matter (fa) and grey matter (gm) to predict a single LV.
#Total R^2 for FA predicting vstmlv is ~38% (versus 8% with noise), and ~27% for gm
#Most exciting would be to include both of course
# standardize variables
X = as.matrix(datacamcan[,100:102])
cov = as.matrix(datacamcan[,50:97])
data.std <- data.frame(scale(datacamcan[,c(50:97,100:102)]))
library(corrplot)
?corrplot
corrplot(cor(data.std,use="complete.obs"))
#############Predicting VSTM: White matter (48 ROIS)
vstmCFA_WM<-'
vstmlv=~NA*VSTMcolour_K_ss2+VSTMcolour_K_ss3+VSTMcolour_K_ss4
vstmlv~~1*vstmlv
vstmlv~fa 1 +fa 2 +fa 3 +fa 4 +fa 5 +fa 6 +fa 7 +fa 8 +fa 9 +fa 10 +fa 11 +fa 12 +fa 13 +fa 14 +fa 15 +fa 16 +fa 17 +fa 18 +fa 19 +fa 20 +fa 21 +fa 22 +fa 23 +fa 24 +fa 25 +fa 26 +fa 27 +fa 28 +fa 29 +fa 30 +fa 31 +fa 32 +fa 33 +fa 34 +fa 35 +fa 36 +fa 37 +fa 38 +fa 39 +fa 40 +fa 41 +fa 42 +fa 43 +fa 44 +fa 45 +fa 46 +fa 47 +fa 48
'
fitvstm_WM <- cfa(vstmCFA_WM, data=data.std, estimator='mlr',missing='fiml')
summary(fitvstm_WM, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
#regsem
lav.out_WM<-try(lavaan::sem(vstmCFA_WM,data.std,fixed.x=TRUE,meanstructure=FALSE),silent=TRUE)
A <- extractMatrices(lav.out_WM)$A
A[A!=0]
#cov.test= cov(data.test[,c(51:98,100:102)],use="complete.obs")
#tt = regsem(lav.out_WM)
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=20,jump=.01,type="lasso",pars_pen=c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"),)
reg.out1_WM
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=20,jump=.02,type="lasso",pars_pen=c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"))
reg.out1_WM
plot(reg.out1_WM)
reg.out1_WM
# enet, alpha=0.5 has problems converging at higher than 15 lambdas at 0.075 jump
reg.out1_WM <- cv_regsem(lav.out_WM,n.lambda=25,jump=.02,type="lasso",pars_pen=c(4:51),
fit.ret=c("Fmin","chisq","ncp","BIC","rmsea"))
plot(reg.out1_WM)
reg.out1_WM
saveRDS(reg.out1_WM,"camcan_fa_dec5.rds")
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
#'
cv.out = cv_regsem(outt,type="ridge", pars_pen=c(1:2,6:8), n.lambda=20,jump=0.01)
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
outt = cfa(mod,HS)
#'
cv.out = cv_regsem(outt, type="ridge", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=20,jump=0.01)
#' summary(cv.out)
plot(cv.out, show.minimum="BIC")
HS <- data.frame(scale(HolzingerSwineford1939[ ,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS, meanstructure=TRUE)
#'
fit1 <- multi_optim(outt, max.try=40,
lambda=0.1, type="lasso")
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# # Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
#'
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
#equivalent to pars_pen=c(1:2, 6:8)
summary(fit1)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
