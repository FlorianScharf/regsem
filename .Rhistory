pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
library(regsem)
fitt <- cv_regsem(outt, lambda=0.05,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="rlasso2",random.alpha=.5,
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
summary(fit1)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l1*x3 + l1*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l1"))
summary(fit1)
fit2 <- regsem(outt, lambda=10.0, type="lasso",
pars_pen=c("l1"))
summary(fit1)
summary(outt)
fit2 <- regsem(outt, lambda=0.02, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=0.03, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=.5, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=1, type="lasso",
pars_pen=c("l1"))
summary(fit2)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l1"))
summary(fit2)
summary(outt)
summary(outt)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l11*x7 + l11*x8 + l11*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l11"))
summary(fit1)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l11"))
summary(fit2)
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l11*x7 + l11*x8 + l11*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l11"))
summary(fit1)
library(regsem)
summary(outt)
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l9*x7 + l9*x8 + l9*x9
'
# fit model with lavaan:
outt = cfa(mod, HS, meanstructure=F)
summary(outt)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l11"))
summary(fit1)
# regularize parameter l1:
fit1 <- regsem(outt, lambda=0.0, type="lasso",
pars_pen=c("l9"))
summary(fit1)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l9"))
summary(fit2)
extractMatrices(outt)
"l1" == "l11"
model=outt
matrices <-  list()
#library(Matrix)
#library(lavaan)
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
#parT = parT[parT$exo != 1,]
#pars = pars[parT$exo != 1,]
nfac.hold1 <- pars[pars$op == "=~",]
nfac1 <- length(unique(nfac.hold1$lhs))
mean =FALSE
if(any(parT$op == "~1")){
parTT = parT[parT$op == "~1",]
if(any(parTT$free > 0)){
mean = TRUE
}
}
nfac2 = nfac1 + ifelse(mean==TRUE,1,0)
# check for groups
#model@pta$ngroups
nvar = model@pta$nvar[[1]][1]
A_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
#unique(nfac.hold1$lhs)
name <- unique(pars$lhs)
name.vars <- model@pta$vnames$ov[[1]]
name.factors <- model@pta$vnames$lv[[1]]
if(identical(name.factors, character(0))){
name.factors2=NA
}else{
name.factors2 = name.factors
}
if(length(name.factors)!=0){
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1",name.factors)
rownames(A_init) <- c(name.vars,"1",name.factors)
}else{
colnames(A_init) <- c(name.vars,name.factors)
rownames(A_init) <- c(name.vars,name.factors)
}
}else{
if(mean==TRUE){
colnames(A_init) <- c(name.vars,"1")
rownames(A_init) <- c(name.vars,"1")
}else{
colnames(A_init) <- c(name.vars)
rownames(A_init) <- c(name.vars)
}
}
A <- A_init
A.parT = parT[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.pars = pars[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.parFree <- A.parT[A.parT$free > 0,]
uniq <- unique(A.parFree[,"label"])
uniq
uniq2 <- uniq[table(A.parFree[,"label"]) == 1]
uniq2
table(A.parFree[,"label"]) == 1
A.parFree[,"label"])
A.parFree[,"label"]
pars.align.A = matrix(NA,length(A.parFree$free),2)
pars.align.A
A.parFree33 = A.parFree
if(length(uniq2)>0){
for(i in 1:length(uniq2)){
A.parFree[A.parFree[,"label"] == uniq2[i],"label"] <- ""
}
}
# any equality?
if(any(duplicated(A.parFree$label[A.parFree$label != ""]) == T)){
labels = unique(A.parFree$label[A.parFree$label != ""])
for(i in 1:length(labels)){
equals = A.parFree$free[A.parFree$label == labels[i]]
min.equal = min(equals)
max.equal = max(equals)
A.parFree$free[A.parFree$label == labels[i]] <- min.equal
#  dec = max.equal - min.equal
# A.parFree$free[A.parFree$label == labels[i]] <- A.parFree$free[A.parFree$label == labels[i]] - dec
}
#equals = A.parFree$free[A.parFree$label == labels]
}
A.parFree[,"free"] <- rank(A.parFree[,"free"],ties.method="min")
A.parFree2 <- A.parFree
A.parFree2
x="l9"
if (is.null(x)) {return(x)} else
if (is.numeric(x)) {return (x)}
else if (is.character(x)) {
labels <- parTable(model)$label
ids <- parTable(model)$free
matching.ids <- which(labels %in% x)
if (length(matching.ids)!=length(x)) {
stop("Have to specify parameter number in pars_pen for equality constrained labels")
}
return(ids[matching.ids])
} else {
warning("Unknown class type passed to parse_parameters().")
return(NULL)
}
if (is.null(x)) {return(x)} else
if (is.numeric(x)) {return (x)}
else if (is.character(x)) {
labels <- parTable(model)$label
ids <- parTable(model)$free
matching.ids <- which(labels %in% x)
if (length(matching.ids)!=length(x)) {
stop("Have to specify parameter number in pars_pen for equality constrained labels")
}
return(ids[matching.ids])
} else {
warning("Unknown class type passed to parse_parameters().")
return(NULL)
}
labels <- parTable(model)$label
ids <- parTable(model)$free
matching.ids <- which(labels %in% x)
matching.ids
if (length(matching.ids)!=length(x)) {
stop("Have to specify parameter number in pars_pen for equality constrained labels")
}
length(x)
extractMatrices(outt)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=6)
summary(fit2)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l9"))
summary(fit2)
mats = extractMatrices(model)
if(estimator=="ML"){
estimator2 = 1
}else if(estimator=="ULS"){
estimator2 = 2
}
#pars_pen2 <- parse_parameters(pars_pen,model)
ids = which(mats$pars.align[,2] %in% pars_pen)
pars_pen="l9"
#pars_pen2 <- parse_parameters(pars_pen,model)
ids = which(mats$pars.align[,2] %in% pars_pen)
ids
pars_pen2 = as.numeric(mats$pars.align[ids,1])
pars_pen2
ids
mats$pars.align
mats$pars.align[ids,1]
ids
mats$pars.align
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=6)
summary(fit2)
fit2 <- regsem(outt, lambda=1, type="lasso",
pars_pen=6)
summary(fit2)
ids
library(regsem)
fit2 <- regsem(outt, lambda=.2, type="lasso",
pars_pen=c("l9"))
library(regsem)
library(Rsolnp)
?solnp
10^-3
?cv_regsem
library(regsem)
?cv_regsem
install.packages("roxygen2")
pkgbuild::compile_dll()
devtools::document()
library(regsem)
install.packages("knitr")
install.packages("semPlot")
library(regsem)
install.packages("snowfall")
install.packages("GA")
install.packages("caret")
install.packages("glmnet")
install.packages("glmnet")
install.packages("glmnet")
library(glmnet)
install.packages("ISLR")
install.packages("lbfgs")
install.packages("NlcOptim")
install.packages("optimx")
library(regsem)
library(regsem)
library(regsem)
library(regsem)
R CMD check regsem_1.3.9.tar.gz
R CMD check --as-cran regsem_1.3.9.tar.gz
check(0)
check()
library(devtools)
check()
reg.out <- cv_regsem(lav.out,n.lambda=30,type="lasso",jump=0.05,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
library(semPlot) # for plotting the model
library(lavaan)
library(regsem)
sim.mod <- "
f1 =~ 1*y1 + 1*y2 + 1*y3+ 1*y4 + 1*y5
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0.2*x6 + 0.5*x7 + 0.8*x8
f1~~1*f1"
dat.sim = simulateData(sim.mod,sample.nobs=100,seed=12)
run.mod <- "
f1 =~ NA*y1 + y2 + y3+ y4 + y5
f1 ~ c1*x1 + c2*x2 + c3*x3 + c4*x4 + c5*x5 + c6*x6 + c7*x7 + c8*x8
f1~~1*f1
"
lav.out <- sem(run.mod,dat.sim,fixed.x=FALSE)
#summary(lav.out)
parameterestimates(lav.out)[6:13,] # just look at regressions
semPaths(lav.out)
reg.out <- cv_regsem(lav.out,n.lambda=30,type="lasso",jump=0.05,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
reg.out <- cv_regsem(lav.out,n.lambda=30,type="lasso",jump=0.04,
pars_pen=c("c1","c2","c3","c4","c5","c6","c7","c8"))
# not run
extractMatrices(lav.out)["A"]
summary(reg.out)
plot(reg.out)
head(reg.out$fits,10)
reg.out$final_pars[1:13] # don't show variances/covariances
library(regsem)
library(regsem)
check()
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
?cv_regsem
library(regsem)
vignette("overview",package="regsem")
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
outt = cfa(mod, HS)
# increase to > 25
cv.out = cv_regsem(outt,type="lasso", pars_pen=c(1:2,6:8),
n.lambda=5,jump=0.01)
# check parameter numbers
extractMatrices(outt)["A"]
# equivalent to
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
outt = cfa(mod,HS)
# increase to > 25
cv.out = cv_regsem(outt, type="lasso", pars_pen=c("l1","l2","l6","l7","l8"),
n.lambda=5,jump=0.01)
summary(cv.out)
plot(cv.out, show.minimum="BIC")
vignette("short_intro",package="regsem")
vignette(,package="regsem")
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
outt = cfa(mod, HS)
# check parameter numbers
extractMatrices(outt)["A"]
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=FALSE,from=0.15,to=0.2,n.lambda=5,n.boot=5,det.thr=FALSE,p=0.9,type="lasso", pars_pen=c("l1","l2","l6","l7","l8"))
stabsel.out$selection_results
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=50,n.boot=5,det.thr=FALSE,p=0.9,type="lasso", pars_pen=c("l1","l2","l6","l7","l8"))
?stabsel
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=50,n.boot=5,p=0.9,type="lasso", pars_pen=c("l1","l2","l6","l7","l8"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=50,n.boot=5,p=0.9,type="lasso", pars_pen=c("l1","l2","l6","l7","l8"))
library(regsem)
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=50,n.boot=5,p=0.9,type="lasso", pars_pen=c("l1","l2","l6","l7","l8"))
stabsel.out$selection_results
stabsel.out
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="lasso", p.method="bic",
pars_pen=c("l1","l2","l6","l7","l8"))
stabsel.out$selection_results
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + *x7 + x8 + x9
x1 ~~ r1*x2;x1 ~~ r2*x3;x1 ~~ r3*x4;x1 ~~ r4*x5
'
outt = cfa(mod, HS)
mod <- '
f =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
x1 ~~ r1*x2;x1 ~~ r2*x3;x1 ~~ r3*x4;x1 ~~ r4*x5
'
outt = cfa(mod, HS)
# check parameter numbers
extractMatrices(outt)["A"]
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="lasso", p.method="bic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="lasso", p.method="bic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
summary(outt)
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
stabsel.out
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=5,n.lambda=20,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.lambda=5,n.lambda=20,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.lambda=20,n.lambda=5,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.nlambda=20,n.lambda=5,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
stabsel.out
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.nlambda=20,n.lambda=5,
n.boot=10,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
library(regsem)
library(regsem)
library(regsem)
load("C:/Users/rjacobuc/Desktop/timeseries.Rdata")
library(lavaan)
library(regsem)
library(psych)
#### Now test it using the time series data generated by a unified SEM model
#load(file = "~/timeseries.Rdata")
hybrid.mod <-  "
V6  ~ V1 + V2 + V3 + V4 + V5      + V7 + V8 + V9 + V10
V7  ~ V1 + V2 + V3 + V4 + V5 + V6      + V8 + V9 + V10
V8  ~ V1 + V2 + V3 + V4 + V5 + V6 + V7      + V9 + V10
V9  ~ V1 + V2 + V3 + V4 + V5 + V6 + V7 + V8      + V10
V10 ~ V1 + V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9
V6 ~~ NA*V7 + NA*V8 + NA*V9 + NA*V10
V7 ~~ NA*V8 + NA*V9 + NA*V10
V8 ~~ NA*V9 + NA*V10
V9 ~~ NA*V10
"
lav.hybrid <-sem(hybrid.mod, Ind_data[[1]] , fixed.x=FALSE)
reg.out1 <- regsem(lav.hybrid,lambda = c(0.12,0.5),
pars_pen = list(c(2:10, 12:20, 22:30, 31:40, 42:45),  # regression beta coefficients in l1
c(46:55, 62:65, 67:69, 71:72, 74)))
library(regsem)
reg.out1 <- regsem(lav.hybrid,lambda = c(0.12,0.5),
pars_pen = list(c(2:10, 12:20, 22:30, 31:40, 42:45),  # regression beta coefficients in l1
c(46:55, 62:65, 67:69, 71:72, 74)))
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
?regsem
library(lavaan)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
.8*320
install.packages("RcppArmadillo")
library(regsem)
5/9
.555*86
install.packages("qpdf")
library(regsem)
library(qpdf)
library(regsem)
library(regsem)
