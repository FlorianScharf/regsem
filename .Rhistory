fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=FALSE,alpha.inc=TRUE,momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=TRUE,momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=FALSE,alpha.inc=TRUE,momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=TRUE,momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
abline(a=0,b=0)
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=TRUE,momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
abline(a=0,b=0)
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc="dec",momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.5,step.ratio=FALSE)
fit.reg.tune
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.3,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
abline(a=0,b=0)
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.2,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
out.cv <- cv_regsem(fit,n.lambda=20,mult.start=TRUE,jump=0.01,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=TRUE,step=.1,step.ratio=FALSE,
alpha.inc=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=20,mult.start=TRUE,jump=0.01,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=TRUE,step=.1,step.ratio=FALSE,
alpha.inc=FALSE,momentum=FALSE)
out.cv <- cv_regsem(fit,n.lambda=10,mult.start=TRUE,jump=0.01,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=TRUE,step=.1,step.ratio=FALSE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
summary(fit)
out.cv <- cv_regsem(fit,n.lambda=10,mult.start=TRUE,jump=0.01,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=.1,step.ratio=FALSE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=10,mult.start=TRUE,jump=0.01,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=.1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=10,mult.start=TRUE,jump=0.01,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=.1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.01,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=.1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.01,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.1,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
library(regsem)
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
abline(a=0,b=0)
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.2,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
out.cv
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.2,multi.iter=5,
type="mcp", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.2,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.05,multi.iter=5,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
abline(a=0,b=0)
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.05,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
out.cv <- cv_regsem(fit,n.lambda=100,mult.start=TRUE,jump=0.2,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,1),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
abline(a=0,b=0)
out.cv
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
coef.mat <- out.cv[[1]][,1:15]
plot(out.cv[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,1),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(out.cv[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=1,step.ratio=TRUE)
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
coef.mat <- fit.reg.tune[[1]][,2:13]
plot(fit.reg.tune[[2]][,"lambda"],coef.mat[,1],ylim=c(-0.5,.6),ylab="Loading",xlab="Penalty",type="l",lty=1,col=1)
for(i in 2:(ncol(coef.mat))){
lines(fit.reg.tune[[2]][,"lambda"],coef.mat[,i],lty=i,col=1)
#points(mat[,(nload)])
}
library(regsem)
library(regsem)
library(lavaan)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
'
outt = cfa(mod,HS,meanstructure=FALSE)
extractMatrices(outt)$parameters
fit1 <- cv_regsem(outt,jump=0.03,type="lasso",optMethod="coord_desc",
full=TRUE,n.lambda=50,mult.iter=2,momentum=FALSE,
gradFun="ram",tol=1e-5,step.ratio=FALSE,step=.5,alpha.inc="dec",max.iter=100)
fit1
library(regsem)
library(lavaan)
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ NA*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
f~~1*f
'
outt = cfa(mod,HS,meanstructure=FALSE)
extractMatrices(outt)$parameters
fit1 <- cv_regsem(outt,jump=0.03,type="lasso",optMethod="coord_desc",
full=TRUE,n.lambda=50,mult.iter=2,momentum=FALSE,
gradFun="ram",tol=1e-5,step.ratio=FALSE,step=.5,alpha.inc="dec",max.iter=100)
fit1
plot(fit1,1:9)
plot.regsem(fit1,1:9)
library(regsem)
plot_cv(fit1,1:9)
?plot_cv
library(regsem)
plot_cv(fit1,1:9)
coef.mat
coef.mat <- abs(fit1[[1]][,1:9])
min(coef.mat)
coef.mat
library(regsem)
plot_cv(fit1,1:9)
?plot_cv
library(regsem)
plot_cv(fit1,1:9)
library(regsem)
install.packages("colorspace")
plot_cv(fit1,1:9)
library(regsem)
plot_cv(fit1,1:9)
install.packages("colorspace")
plot_cv(fit1,1:9)
?rainbow_hcl
library(regsem)
plot_cv(fit1,1:9)
pars<- 1:9
colls <- colorspace::rainbow_hcl(length(pars))
colls
library(regsem)
plot_cv(fit1,1:9)
library(regsem)
## Simulating time series data from ------------------------
## Phi (lag) and A (contemp) matrices ----------------------
ts.generate <- function (A,Phi,t) {
repeat {
nvar  <- ncol(A)
noise <- matrix(rnorm(nvar*250,0,1),nvar)
I     <- diag(nvar)
time  <- matrix(0,nrow=nvar,ncol=251)
time1 <- matrix(0,nrow=nvar,ncol=250)
for (i in 1:250){
time1[,i]  <- solve(I-A)%*%(Phi%*%time[,i] + noise[,i])
time[,i+1] <- time1[,i]
}
time1  <- time1[,(50:(50+t))]
series <- t(time1)
if (abs(max(series)) < 20 & abs(min(series)) > .01 & abs(min(series)) < 20) break
}
return(series)
}
A <- matrix(
c(0,  0, .5,
.5,  0,  0,
0,  0,  0), nrow = 3, ncol = 3, byrow = TRUE)
Phi <- matrix(
c(.5,  0,  0,
0, .5,  0,
0, .5, .5), nrow = 3, ncol = 3, byrow = TRUE)
data     <- ts.generate(A, Phi, 200)
first    <- data[1:(nrow(data)-1), ]
second   <- data[2:nrow(data), ]
data.lag <- data.frame(first, second)
colnames(data.lag) <- c("V1lag", "V2lag", "V3lag", "V1", "V2", "V3")
### end simulating time series -------------------------------
## fitting data-generating model in lavaan ------------------
library(lavaan)
model <- '
# estimate all autoregressive
V1 ~ V1lag
V2 ~ V2lag
V3 ~ V3lag
# estimate cross-lagged
V3 ~ V2lag
# estimate contemp
V2 ~ V1
V1 ~ V3
'
fit <- sem(model, data.lag)
summary(fit)
fitmeasures(fit)
parTable(fit)
## end fitting data-generating model in lavaan ---------------
## attempting to fit full model with all possible paths
## and then send to regsem. does not work
library(lavaan)
model <- '
# estimate all autoregressive
V1 ~ V1lag
V2 ~ V2lag
V3 ~ V3lag
# estimate all cross-lagged
V1 ~ V2lag
V1 ~ V3lag
V2 ~ V1lag
V2 ~ V3lag
V3 ~ V1lag
V3 ~ V2lag
# estimate all contemp
V1 ~ V2
V2 ~ V1
V1 ~ V3
V3 ~ V1
V2 ~ V3
V3 ~ V2
'
fit <- sem(model, data.lag)
summary(fit)
fitmeasures(fit)
library(regsem)
#out <- multi_optim(fit,type="lasso", gradFun = "ram",pars_pen=c(1:15),max.try=50,
#                   lambda = 0.2,optMethod="coord_desc",step=1,step.ratio=TRUE)
#summary(out)
#out <- regsem(fit,type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
#                   lambda = 0.5,optMethod="coord_desc",step=.5,step.ratio=TRUE)
#summary(out)
#out$KKT1
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=5,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=TRUE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
plot_cv(out.cv)
plot_cv(out.cv,1:15)
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="scad", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=TRUE,step=.1,#step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="mcp", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="mcp", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=TRUE,momentum=FALSE)
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=TRUE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=FALSE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
out.cv
out.cv <- cv_regsem(fit,n.lambda=50,mult.start=TRUE,jump=0.4,multi.iter=20,
type="lasso", gradFun = "ram",pars_pen=c(1:15),tol=1e-4,
fit.ret=c("chisq","df","BIC"),
optMethod="coord_desc", full=TRUE,step=1,step.ratio=TRUE,
alpha.inc=FALSE,momentum=FALSE)
library(ISLR)
library(regsem)
data(College)
#standardizing variables
College1 = College[which(College$Private=="Yes"),]
Data = data.frame(scale(College1[c(3,4,9:12,15,17)]))
#lavaan model with all mediators
model1 <-
' # direct effect (c)
Enroll ~ c*Accept
# mediators
Outstate ~ a1*Accept
Room.Board ~ a2*Accept
Books ~ a3*Accept
Personal ~ a4*Accept
S.F.Ratio ~ a5*Accept
Expend ~ a6*Accept
Enroll ~ b1*Outstate + b2*Room.Board + b3*Books + b4*Personal + b5*S.F.Ratio + b6*Expend
# indirect effects (a*b)
a1b1 := a1*b1
a2b2 := a2*b2
a3b3 := a3*b3
a4b4 := a4*b4
a5b5 := a5*b5
a6b6 := a6*b6
# total effect (c_prime)
total := c + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5) + (a6*b6)
#Enroll~~0.5*Enroll
'
#p-value approach using delta method standard errors
fit.delta = sem(model1,data=Data,fixed.x=T)
summary(fit.delta)
extractMatrices(fit.delta)$A
#exploratory mediation analysis via regularization
#Stage 1
#selection of tuning parameter
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
plot_cv(fit.reg.tune,2:13)
fit.reg.tune
library(regsem)
plot_cv(fit.reg.tune,2:13)
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
plot_cv(fit.reg.tune,2:13)
fit.reg.tune = cv_regsem(fit.delta,type="mcp",pars_pen = c(2:13),jump=0.15,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
plot_cv(fit.reg.tune,2:13)
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.1,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
plot_cv(fit.reg.tune,2:13)
fit.reg.tune = cv_regsem(fit.delta,type="scad",pars_pen = c(2:13),jump=0.05,multi.iter=4,mult.start=TRUE,lambda.start=0,
n.lambda=50,tol=1e-5,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",
warm.start=TRUE,full=TRUE,alpha.inc=FALSE,momentum=FALSE,step=.1,step.ratio=FALSE)
fit.reg.tune
plot_cv(fit.reg.tune,2:13)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
