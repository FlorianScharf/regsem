}
}
count = 0
for(i in 1:max(max(A),max(S))){
if(any(A == i)){
count = count + 1
pos = which(A == i,arr.ind=T)
one = colnames(A)[pos[1,2]]
two = rownames(A)[pos[1,1]]
names(pars)[count] = paste(one,"->",two)
}else if(any(S==i)){
count = count + 1
pos = which(S == i,arr.ind=T)
#    if(nrow(pos) == 1){
one = colnames(S)[pos[1,2]]
two = rownames(S)[pos[1,1]]
#    }else if(nrow(pos) > 1){
#     one = colnames(S)[pos[1,2]]
#     two = rownames(S)[pos[1,1]]
#    }
names(pars)[count] = paste(one,"~~",two)
}
}
S
matrices <-  list()
#library(Matrix)
#library(lavaan)
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
#parT = parT[parT$exo != 1,]
#pars = pars[parT$exo != 1,]
nfac.hold1 <- pars[pars$op == "=~",]
nfac1 <- length(unique(nfac.hold1$lhs))
nfac2 = nfac1 + ifelse(any(pars$op == "~1"),1,0)
# check for groups
#model@pta$ngroups
nvar = model@pta$nvar[[1]][1]
A_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
#unique(nfac.hold1$lhs)
name <- unique(pars$lhs)
name.vars <- model@pta$vnames$ov[[1]]
name.factors <- model@pta$vnames$lv[[1]]
if(length(name.factors)!=0){
if(any(pars$op == "~1")){
colnames(A_init) <- c(name.vars,"1",name.factors)
rownames(A_init) <- c(name.vars,"1",name.factors)
}else{
colnames(A_init) <- c(name.vars,name.factors)
rownames(A_init) <- c(name.vars,name.factors)
}
}else{
if(any(pars$op == "~1")){
colnames(A_init) <- c(name.vars,"1")
rownames(A_init) <- c(name.vars,"1")
}else{
colnames(A_init) <- c(name.vars)
rownames(A_init) <- c(name.vars)
}
}
A <- A_init
A.parT = parT[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.pars = pars[parT$op == "=~" | parT$op == "~1" | parT$op == "~",]
A.parFree <- A.parT[A.parT$free > 0,]
if(nrow(A.parFree) > 0){
for(i in 1:nrow(A.parFree)){
if(A.parFree$op[i] == "=~"){
colNum <- which(A.parFree$lhs[i] == colnames(A))
rowNum <- which(A.parFree$rhs[i] == rownames(A))
A[rowNum,colNum] = i
}else if(A.parFree$op[i] == "~1"){
A[which(rownames(A)==A.parFree$lhs[i]),which(colnames(A) == "1")] = i
}else if(A.parFree$op[i] == "~"){
colNum <- which(A.parFree$rhs[i] == colnames(A))
rowNum <- which(A.parFree$lhs[i] == rownames(A))
A[rowNum,colNum] = i
}
}
}else{
A = A
}
# A of free parameters
A_fixed <- A > 10000
parA_fixed = A.parT[A.parT$free == 0,]
for(gg in 1:nrow(parA_fixed)){
coll = which(parA_fixed$lhs[gg] == colnames(A_fixed))
roww = which(parA_fixed$rhs[gg] == rownames(A_fixed))
A_fixed[roww,coll] = T
}
# A_est
A_est = A_init
if(nrow(A.pars) > 0){
for(i in 1:nrow(A.pars)){
if(A.pars$op[i] == "=~"){
colNum <- which(A.pars$lhs[i] == colnames(A_est))
rowNum <- which(A.pars$rhs[i] == rownames(A_est))
A_est[rowNum,colNum] = A.pars$est[i]
}else if(A.pars$op[i] == "~1"){
A_est[which(rownames(A_est)==A.pars$lhs[i]),which(colnames(A_est) == "1")] = A.pars$est[i]
}else if(A.pars$op[i] == "~"){
colNum <- which(A.pars$rhs[i] == colnames(A_est))
rowNum <- which(A.pars$lhs[i] == rownames(A_est))
A_est[rowNum,colNum] = A.pars$est[i]
}
}
}else{
A_est = A_est
}
# create F
F <- A_init[1:(nvar + ifelse(any(pars$op == "~1"),1,0)),]
varNames <- model@pta$vnames$ov.model[[1]]
f.names <- colnames(A)[1:(length(varNames) + ifelse(any(pars$op == "~1"),1,0))]
for(ii in 1:length(f.names)){
#Numm = which(colnames(F)[ii] == f.names[ii])
F[ii,ii] = 1
}
# create S
covars <- pars[pars$op == "~~",]
covarT <- parT[parT$op == "~~",]
S_init <- matrix(0, nrow = nvar + nfac2, ncol = nvar + nfac2)
colnames(S_init) <- colnames(A); rownames(S_init) <- rownames(A)
# S_est -- equality doesn't effect
S_est <- as.matrix(S_init)
for(jj in 1:nrow(covars)){
col1 = which(colnames(S_est) == covars$lhs[jj])
row1 = which(rownames(S_est) == covars$rhs[jj])
S_est[row1,col1] = covars$est[jj]
}
if(any(S_est[lower.tri(S_est)] != 0)){
S_est <- S_est + t(S_est) - diag(diag(S_est))
}
S_est[rownames(S_est) == "1",colnames(S_est) == "1"] <- 1
# S
S <- S_init
covarT.free <- covarT[covarT$free > 0, ]
# any equality?
if(any(duplicated(covarT.free$label[covarT.free$label != ""]) == T)){
labels = unique(covarT.free$label[covarT.free$label != ""])
equals = covarT.free$free[covarT.free$label == labels]
min.equal = min(equals)
max.equal = max(equals)
covarT.free$free[covarT.free$label == labels] <- min.equal
dec = max.equal - min.equal
covarT.free$free[covarT.free$label != labels] <- covarT.free$free[covarT.free$label != labels] - dec
}
for(jj in 1:nrow(covarT.free)){
col1 = which(colnames(S) == covarT.free$lhs[jj])
row1 = which(rownames(S) == covarT.free$rhs[jj])
S[row1,col1] = covarT.free$free[jj]
}
if(any(S[lower.tri(S)] != 0)){
S <- S + t(S) - diag(diag(S))
}
S
order(S[S != 0])
?order
S[S != 0]
ss= S[S != 0]
unique(ss)
min(ss)
ss = min(ss)
ss= S[S != 0]
ss == min(ss)
rank(ss)
round(rank(ss))
order(round(rank(ss)))
order(ss)
sort(ss)
length(unique(ss))
ss == min(ss)
val = ss[ss == min(ss)]
val
ss[ss == min(ss)]
ss = ss[ss != val[1]]
ss
ss= S[S != 0]
for(i in 1:length(unique(ss))){
val = ss[ss == min(ss)]
S[S == val[1]] <- i
ss = ss[ss != val[1]]
}
S
library(regsem)
reg.out = multi_optim(lav.out,lambda=0,pars_pen=c(7:96),type="ridge",
max.try=50,Start2=ss,max.iter=10000)
reg.out = regsem(lav.out,lambda=0,pars_pen=c(7:96),type="lasso")
reg.out
fitmeasures(lav.out)
reg.out = multi_optim(lav.out,lambda=0,pars_pen=c(7:96),type="lasso",
max.try=50,Start2=ss,max.iter=10000)
length(extractMatrices(lav.out)$parameters)
reg.out = regsem(lav.out,lambda=0.2,pars_pen=c(7:96),type="lasso")
reg.out = regsem(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge")
reg.out = multi_optim(lav.out,lambda=0,pars_pen=c(7:96),type="lasso",
max.try=50,max.iter=10000)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="lasso",
max.try=50,max.iter=10000)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,warm.start=TRUE)
reg.out
length(reg.out$coefficients)
library(regsem)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,warm.start=TRUE)
library(regsem)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000)
library(regsem)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000)
library(regsem)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000)
reg.out = multi_optim(lav.out,lambda=0.03,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000)
reg.out = multi_optim(lav.out,lambda=0.03,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,gradFun="none")
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,gradFun="none")
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,gradFun="none")
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
'
lav.out = lavaan::sem(lav.mod,dat,fixed.x=TRUE)
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
x29~~0.98*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
'
lav.out = lavaan::sem(lav.mod,dat,fixed.x=TRUE)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="lasso",
max.try=50,max.iter=10000,gradFun="none")
library(regsem)
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="lasso",
max.try=50,max.iter=10000,gradFun="none")
reg.out = multi_optim(lav.out,lambda=0.2,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,gradFun="none")
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
'
lav.out = lavaan::sem(lav.mod,dat)
summary(lav.out)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
x29~~x30
'
lav.out = lavaan::sem(lav.mod,dat)
summary(lav.out)
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
x29~~0.95*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
x29~~x30
'
lav.out = lavaan::sem(lav.mod,dat)
summary(lav.out)
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
x29~~0.95*x30
x29~~1*x29
x30~~1*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
x29~~x30
'
lav.out = lavaan::sem(lav.mod,dat)
summary(lav.out)
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
#x29~~0.95*x30
x29~~1*x29
x30~~1*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
x29~~x30
'
lav.out = lavaan::sem(lav.mod,dat)
summary(lav.out)
population.model <- '
f1 =~ y1 + 0.8*y2 + 1.2*y3
f2 =~ y4 + 0.5*y5 + 1.5*y6
f3 =~ y7 + 0.1*y8 + 0.9*y9
f1~~0.5*f2;f1~~0.5*f3;
f2~~0.5*f3;
f1 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0*x28 + 0*x29 + 0*x30
f2 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0.95*x25 + 0.95*x26 + 0.95*x27 + 0*x28 + 0*x29 + 0*x30
f3 ~ 0*x1 + 0*x2 + 0*x3 + 0*x4 + 0*x5 + 0*x6 + 0*x7 + 0*x8 + 0*x9 +
0*x10 + 0*x11 + 0*x12 + 0*x13 + 0*x14 + 0*x15 + 0*x16 + 0*x17 + 0*x18 + 0*x19 +
0*x20 + 0*x21 + 0*x22 + 0*x23 + 0*x24 + 0*x25 + 0*x26 + 0*x27 + 0.95*x28 + 0.95*x29 + 0.95*x30
x29~~0.95*x30
x29~~1*x29
x30~~1*x30
'
dat <- simulateData(population.model,sample.nobs=500)
lav.mod <- '
f1 =~ y1 + y2 + y3
f2 =~ y4 + y5 + y6
f3 =~ y7 + y8 + y9
f1~~f2;f1~~f3;
f2~~f3;
f1 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f2 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
f3 ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 +
x10 + x11 + x12 + x13 + x14 + x15 + x16 + x17 + x18 + x19 +
x20 + x21 + x22 + x23 + x24 + x25 + x26 + x27 + x28 + x29 + x30
x29~~x30
'
lav.out = lavaan::sem(lav.mod,dat)
summary(lav.out)
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:96),type="lasso",
max.try=50,max.iter=10000,gradFun="none")
reg.out = multi_optim(lav.out,lambda=0.1,pars_pen=c(7:96),type="ridge",
max.try=50,max.iter=10000,gradFun="none")
