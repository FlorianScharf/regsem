install.packages("Rsolnp")
install.packages("optimx")
library(regsem,quietly=T) # Depends on lavaan
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod,HS,meanstructure=TRUE)
fit1 <- regsem(outt,lambda=0.1,type="lasso")
summary(fit1)
parTable(outt)
# or
extractMatrices(outt) # from regsem, can look at par #'s directly in A or S matrix
# only penalize first 3 loadings
fit2 <- regsem(outt,lambda=0.1,type="lasso",pars_pen=c(1:3))
summary(fit2)
?multi_optim
fit.mult <- multi_optim(outt,lambda=0.15,max.try=100,type="lasso",
max.iter=100000,tol=1e-4)
summary(fit.mult)
# get fit of model -- using bootstrapping (naive)
fit_indices(fit.mult,CV="boot")
cv.out = cv_regsem(outt,type="ridge",gradFun="none",fit.ret2="boot",
n.lambda=40,mult.start=TRUE)
cv.out[[1]]
# see rmsea and BIC for each value of lambda
cv.out[[2]]
# lowest
min.bic <- min(cv.out[[2]][,"BIC"])
loc <- which(cv.out[[2]][,"BIC"] ==  min.bic)
cv.out[[2]][1,]
library(regsem); library(semPlot)
set.seed(1234)
N = 200
X <- rnorm(N)
M1 <- 0.5*X + rnorm(N)
M2 <- 0.4*X + rnorm(N)
M3 <- rnorm(N, sd=.1)
M4 <- rnorm(N, sd=.1)
M5 <- rnorm(N, sd=.1)
Y <- 0.7*M1 +0.3*M2 + rnorm(N)
Data <- data.frame(X = X, Y = Y, M1 = M1, M2 = M2, M3=M3, M4=M4, M5=M5)
model <-
' # direct effect
Y ~ c*X
# mediator
M1 ~ a1*X
M2 ~ a2*X
M3 ~ a3*X
M4 ~ a4*X
M5 ~ a5*X
Y ~ b1*M1 + b2*M2 + b3*M3 + b4*M4 + b5*M5
# indirect effect (a*b)
a1b1 := a1*b1
a2b2 := a2*b2
a3b3 := a3*b3
a4b4 := a4*b4
a5b5 := a5*b5
# total effect
total := c + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5)
'
fit <- sem(model, data = Data)
summary(fit)
model=fit
if(any(is.na(extractMatrices(model)$mediation))==FALSE){
mediation_vals <- extractMatrices(model)$mediation
}else{
mediation_vals <- NA
}
res$mediation <- mediation_vals
ppars <- mediation_vals$pars.mult
mats <- extractMatrices(model)
attach(mats)
for(i in 1:1){#1:length(extractMatrices(model)$parameters)){
for(j in 1:length(ppars)){
if(any(A==i)){
rep.par <- round(A_est[A==i],3)
}else if(any(S==i)){
rep.par <- round(S_est[S==i],3)
}
ppars[j] <- gsub(as.character(i),rep.par,ppars[j])
#ppars[j] <- grep(i,rep.par)
}
}
ppars
ppars <- mediation_vals$pars.mult
#eval(ppars[1])
for(i in 1:1){#1:length(extractMatrices(model)$parameters)){
for(j in 1:length(ppars)){
if(any(A==i)){
rep.par <- round(A_est[A==i],3)
}else if(any(S==i)){
rep.par <- round(S_est[S==i],3)
}
ppars[j] <- gsub(as.character(i)+,rep.par,ppars[j])
#ppars[j] <- grep(i,rep.par)
#"[0-9]+"
solution <- as.numeric(unlist(ppars))
solution
solution <- as.expression(unlist(ppars))
solution
solution[1]
eval(solution[1])
solution <- unlist(ppars)
solution
"[0-9]+" %in% solution[1]
s <- strsplit(ppars, "[^[:digit:]]")
s
?strsplit
gsub("[^[:digit:]]",1,ppars[j])
ppars[1]
gsub("[^[:digit:]]",1,ppars[1])
gsub("[[:digit:]]",1,ppars[1])
ppars <- mediation_vals$pars.mult
#eval(ppars[1])
for(i in 11){#1:length(extractMatrices(model)$parameters)){
for(j in 1:length(ppars)){
if(any(A==i)){
rep.par <- round(A_est[A==i],3)
}else if(any(S==i)){
rep.par <- round(S_est[S==i],3)
}
ppars[j] <- gsub(as.character(i),rep.par,ppars[j])
#ppars[j] <- grep(i,rep.par)
#"[0-9]+"
}
}
ppars
mediation_vals
ppars[1]
vals <- rep(NA,length(ppars))
s <- strsplit(ppars[1], "[^[:digit:]]")
s
s <- strsplit(ppars[1], "[[:digit:]]")
s
s <- strsplit(ppars[1], "[^[:digit:]]")
s
i=1
val <- as.numeric(s[[1]][i])
va
val
rep.par <- rep(NA,length(s[[1]]))
val <- as.numeric(s[[1]][i])
for(i in 1:length(s[[1]])){
if(any(A==val)){
rep.par[i] <- round(A_est[A==val],3)
}else if(any(S==val)){
}
rep.par[i] <- round(S_est[S==val],3)
}
val
length(s[[1]])
A==val
round(A_est[A==val],3)
round(S_est[S==val],3)
any(S==val)
rep.par <- rep(NA,length(s[[1]]))
rep.par
for(i in 1:length(s[[1]])){
val <- as.numeric(s[[1]][i])
if(any(A==val)){
rep.par[i] <- round(A_est[A==val],3)
}else if(any(S==val)){
rep.par[i] <- round(S_est[S==val],3)
}
}
rep.par
strsplit(ppars[1], "[^[:digit:]]")
?strsplit
?strReverse
?rev
rev(s)
"[^[:digit:]]" %in% ppars[1]
tmp <- sapply(ppars[1], function (k) strsplit(k, "[^0-9]"))
tmp
tmp <- Reduce(union, tmp)
tmp
rep.par
tmp <- Reduce(union, rep.par)
tmp
?Reduce
match(tmp,c("2","7"))
match(s,c("2","7"))
tmp <- sapply(ppars[6], function (k) strsplit(k, "[^0-100]"))
tmp
?substr
parT <- parameterestimates(model)
parT
parT <- lavaan::parTable(model)
parT
parT$free > 0 & parT$label != ""
par.labels <- parT$free > 0 & parT$label != ""
par.labels
parT[par.labels,]
i=1
parT$label[i]
par <- parT$label[i]
par.num <- parT$free[i]
pars <- lavaan::parameterestimates(model)
parT <- lavaan::parTable(model)
med.pars <- parT[parT$op == ":=",]
args <- med.pars$rhs
args.labs <- med.pars$lhs
args.labs
args
library(regsem)
if(any(is.na(extractMatrices(model)$mediation))==FALSE){
mediation_vals <- extractMatrices(model)$mediation
}else{
mediation_vals <- NA
}
mediation_vals
ppars <- mediation_vals$pars.mult
vals <- rep(NA,length(ppars))
parT <- lavaan::parTable(model)
par.labels <- parT$free > 0 & parT$label != ""
parT <- lavaan::parTable(model)
par.labels <- parT$free > 0 & parT$label != ""
val <- rep(NA,length(par.labels))
for(i in 1:nrow(parT[par.labels,])){
par <- parT$label[i]
par.num <- parT$free[i]
if(any(A==par.num)){
val[i] <- round(A_est[A==par.num],3)
}else if(any(S==par.num)){
val[i] <- round(S_est[S==par.num],3)
}
}
val
length(par.labels)
parT <- lavaan::parTable(model)
par.labels <- parT$free > 0 & parT$label != ""
par.labels
val <- rep(NA,nrow(parT[par.labels,]))
for(i in 1:nrow(parT[par.labels,])){
par <- parT$label[i]
par.num <- parT$free[i]
if(any(A==par.num)){
val[i] <- round(A_est[A==par.num],3)
}else if(any(S==par.num)){
val[i] <- round(S_est[S==par.num],3)
}
}
val
parT$label[par.labels]
labs <- parT$label[par.labels]
?gsub
labs <- parT$label[par.labels]
for(i in 1:length(labs)){
for(j in 1:length(ppars)){
ppars[j] <- gsub(labs[i],val[i],ppars[j])
}
}
ppars
eval(ppars[j])
eval(ppars[1])
unquote(ppars[1])
eval(expression(ppars[1]))
eval(as.formula(ppars[1]))
as.formula(ppars[1])
paste(ppars[1],quote=FALSE)
?paste
print(paste(ppars[1]),quote=FALSE)
eval(print(paste(ppars[1]),quote=FALSE))
print(paste(ppars[1]),quote=FALSE)[1]
ppars[1]
as.equation(ppars[1])
as.expression(ppars[1])
eval(as.expression(ppars[1]))
eval(expression(ppars[1]))
?expression
eval(as.expression(ppars[1]))
call(as.expression(ppars[1]))
call((ppars[1])
call(ppars[1])
expression(paste(ppars))
expression(ppars[1])
expression(print(ppars[1]))
mode(ppars[1])
pp <- as.expression(ppars[1])
pp
mode(pp)
eval(pp)
p <- print(ppars[1])
p <- paste(ppars[1])
p
?paste
p <- paste0(ppars[1])
pp <- as.expression(p)
eval(pp)
p <- as.numeric(ppars[1])
p <- print(ppars[1],quote=FALSE)
pp <- as.expression(p)
eval(pp)
pp
p <- as.expression(print(ppars[1],quote=FALSE))
p
cat(ppars[1], "\n")
pp <- as.expression(cat(ppars[1], "\n"))
eval(pp)
pp
p <- cat(ppars[1], "\n")
p <- noquote(ppars[1])
p
pp <- as.expression(p)
eval(pp)
p <- noquote(ppars[1])[1]
pp <- as.expression(p)
eval(pp)
eval(p)
p
mode(p)
pp <- as.expression(p)
mode(pp)
eval(pp)
?as.expression
parse(pp)
parse(p)
eval(parse(text=ppars[1]))
return.vals <- rep(NA,length(ppars))
for(i in 1:length(ppars)){
return.vals[i] <- eval(parse(text=ppars[i]))
}
return.vals
ppars
ppars <- mediation_vals$pars.mult
ppars
first <- paste(return.vals[1],"=")
first
first <- paste("=",return.vals[1])
for(i in 1:length(ppars)){
first <- paste("=",return.vals[i])
ppars[i] <- paste(ppars[i],first)
}
ppars
library(regsem)
outt = sem(model,Data,meanstructure=TRUE,fixed.x=T)
library(regsem); library(semPlot)
set.seed(1234)
N = 200
X <- rnorm(N)
M1 <- 0.5*X + rnorm(N)
M2 <- 0.4*X + rnorm(N)
M3 <- rnorm(N, sd=.1)
M4 <- rnorm(N, sd=.1)
M5 <- rnorm(N, sd=.1)
Y <- 0.7*M1 +0.3*M2 + rnorm(N)
Data <- data.frame(X = X, Y = Y, M1 = M1, M2 = M2, M3=M3, M4=M4, M5=M5)
model <-
' # direct effect
Y ~ c*X
# mediator
M1 ~ a1*X
M2 ~ a2*X
M3 ~ a3*X
M4 ~ a4*X
M5 ~ a5*X
Y ~ b1*M1 + b2*M2 + b3*M3 + b4*M4 + b5*M5
# indirect effect (a*b)
a1b1 := a1*b1
a2b2 := a2*b2
a3b3 := a3*b3
a4b4 := a4*b4
a5b5 := a5*b5
# total effect
total := c + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5)
'
fit <- sem(model, data = Data)
summary(fit)
parameterestimates(fit)
fitmeasures(fit)
semPaths(fit)
ee = extractMatrices(fit)
ee$mediation
outt = sem(model,Data,meanstructure=TRUE,fixed.x=T)
extractMatrices(outt)
set.seed(2)
fit1 <- multi_optim(outt,lambda=0.001,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
fit1
library(regsem)
fit1 <- multi_optim(outt,lambda=0.001,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.001,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.001,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
summary(outt)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
library(regsem); library(semPlot)
set.seed(1234)
N = 200
X <- rnorm(N)
M1 <- 0.5*X + rnorm(N)
M2 <- 0.4*X + rnorm(N)
M3 <- rnorm(N, sd=.1)
M4 <- rnorm(N, sd=.1)
M5 <- rnorm(N, sd=.1)
Y <- 0.7*M1 +0.3*M2 + rnorm(N)
Data <- data.frame(X = X, Y = Y, M1 = M1, M2 = M2, M3=M3, M4=M4, M5=M5)
model <-
' # direct effect
Y ~ c*X
# mediator
M1 ~ a1*X
M2 ~ a2*X
M3 ~ a3*X
M4 ~ a4*X
M5 ~ a5*X
Y ~ b1*M1 + b2*M2 + b3*M3 + b4*M4 + b5*M5
# indirect effect (a*b)
a1b1 := a1*b1
a2b2 := a2*b2
a3b3 := a3*b3
a4b4 := a4*b4
a5b5 := a5*b5
# total effect
total := c + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5)
'
fit <- sem(model, data = Data)
summary(fit)
parameterestimates(fit)
fitmeasures(fit)
semPaths(fit)
ee = extractMatrices(fit)
ee$mediation
outt = sem(model,Data,meanstructure=TRUE,fixed.x=T)
extractMatrices(outt)
set.seed(2)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
extractMatrices(outt)
parTable(outt)
summary(fit1)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.001,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=10,tol=1e-4,warm.start=FALSE)
summary(fit1)
summary(outt)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,warm.start=FALSE)
summary(fit1)
devtools::install_github("rjacobucci/regsem")
library(regsem)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,verbose=TRUE)
extractMatrices(model)$parameters
model=outt
extractMatrices(model)$parameters
s <- strsplit(extractMatrices(model)$parameters, "[^[:digit:]]")
extractMatrices(model)$parameters
s <- strsplit(names(extractMatrices(model)$parameters), "[^[:digit:]]")
s
s <- strsplit(names(extractMatrices(model)$parameters), "[[:digit:]]")
s
pars <- lavaan::parameterestimates(model)
pars[pars$op == "=~" | pars$op == "~",]
nrow(pars[pars$op == "=~" | pars$op == "~",])
nrow(pars[pars$op == "~~",])
val1 = nrow(pars[pars$op == "=~" | pars$op == "~",])
val2 = nrow(pars[pars$op == "~~",])
rep(0,length(val1)) + rnorm(length(val1),0,0.1)
val1 = nrow(pars[pars$op == "=~" | pars$op == "~",])
val2 = nrow(pars[pars$op == "~~",])
rep(0,length(val1)) + rnorm(length(val1),0,0.1)
length(val1)
pars <- lavaan::parameterestimates(model)
val1 = nrow(pars[pars$op == "=~" | pars$op == "~",])
val2 = nrow(pars[pars$op == "~~",])
rep(0,length(val1)) + rnorm(length(val1),0,0.1)
val1
val2
rep(0,length(val1)) + rnorm(length(val1),0,0.1)
rep(0,val1) + rnorm(val1,0,0.1)
abs(rep(0,val1) + rnorm(val1,0,0.1))
start.optim = c(rep(0,val1) + rnorm(val1,0,0.1),abs(rep(0.5,val1) + rnorm(val1,0,0.1)))
start.optim
library(regsem)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,verbose=TRUE)
lavaan::parameterestimates(model)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,verbose=TRUE)
pars <- lavaan::parameterestimates(model)
val1 = nrow(pars[pars$op == "=~" | pars$op == "~" | pars$op == "~1",])
val2 = nrow(pars[pars$op == "~~",])
start.optim = c(rep(0,val1) + rnorm(val1,0,0.1),abs(rep(0.5,val1) + rnorm(val1,0,0.1)))
length(start.optim)
mats <- extractMatrices(model)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,verbose=TRUE)
library(regsem)
library(regsem)
fit1 <- multi_optim(outt,lambda=0.01,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,verbose=TRUE)
fit1 <- multi_optim(outt,lambda=0.1,type="lasso",gradFun="ram",pars_pen = c(7:11),
max.try=50,tol=1e-4,verbose=TRUE)
